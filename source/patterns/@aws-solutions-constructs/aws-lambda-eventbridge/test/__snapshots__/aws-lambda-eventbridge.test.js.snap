// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test deployment w/ existing eventbus 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133ArtifactHashD222514E": Object {
      "Description": "Artifact hash for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D": Object {
      "Description": "S3 bucket for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F": Object {
      "Description": "S3 key for asset version \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "existingeventbus2A99FA49": Object {
      "Properties": Object {
        "Name": "customeventbus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "lambdatoeventbridgestackLambdaFunctionB11F1FF5": Object {
      "DependsOn": Array [
        "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4",
        "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENTBUS_NAME": Object {
              "Ref": "existingeventbus2A99FA49",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "existingeventbus2A99FA49",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4",
        "Roles": Array [
          Object {
            "Ref": "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`Test minimal deployment with new Lambda function 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133ArtifactHashD222514E": Object {
      "Description": "Artifact hash for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D": Object {
      "Description": "S3 bucket for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F": Object {
      "Description": "S3 key for asset version \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "lambdatoeventbridgestackLambdaFunctionB11F1FF5": Object {
      "DependsOn": Array [
        "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4",
        "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENTBUS_NAME": "default",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":event-bus/default",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "lambdatoeventbridgestackLambdaFunctionServiceRoleDefaultPolicyBA8A76A4",
        "Roles": Array [
          Object {
            "Ref": "lambdatoeventbridgestackLambdaFunctionServiceRoleB604A06C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`check multiple constructs in a single stack 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133ArtifactHashD222514E": Object {
      "Description": "Artifact hash for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D": Object {
      "Description": "S3 bucket for asset \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
    "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F": Object {
      "Description": "S3 key for asset version \\"97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "testnewlambdaeventbridge1CustomEventBusA089F10A": Object {
      "Properties": Object {
        "Name": "testnewlambdaeventbridge1CustomEventBusAC585F68",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testnewlambdaeventbridge1LambdaFunctionD736CA1B": Object {
      "DependsOn": Array [
        "testnewlambdaeventbridge1LambdaFunctionServiceRoleDefaultPolicy55E81BC7",
        "testnewlambdaeventbridge1LambdaFunctionServiceRoleAA28934C",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENTBUS_NAME": Object {
              "Ref": "testnewlambdaeventbridge1CustomEventBusA089F10A",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testnewlambdaeventbridge1LambdaFunctionServiceRoleAA28934C",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testnewlambdaeventbridge1LambdaFunctionServiceRoleAA28934C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testnewlambdaeventbridge1LambdaFunctionServiceRoleDefaultPolicy55E81BC7": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testnewlambdaeventbridge1CustomEventBusA089F10A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testnewlambdaeventbridge1LambdaFunctionServiceRoleDefaultPolicy55E81BC7",
        "Roles": Array [
          Object {
            "Ref": "testnewlambdaeventbridge1LambdaFunctionServiceRoleAA28934C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testnewlambdaeventbridge2CustomEventBus089A269C": Object {
      "Properties": Object {
        "Name": "testnewlambdaeventbridge2CustomEventBusFA449A56",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testnewlambdaeventbridge2LambdaFunction8CB825D1": Object {
      "DependsOn": Array [
        "testnewlambdaeventbridge2LambdaFunctionServiceRoleDefaultPolicyE191BB7B",
        "testnewlambdaeventbridge2LambdaFunctionServiceRole9080FD47",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3BucketD627F00D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters97374b7cd550971939648b8e3f8edd06da60f208ee9ed11a763d22b3007fb133S3VersionKeyC13FDC1F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENTBUS_NAME": Object {
              "Ref": "testnewlambdaeventbridge2CustomEventBus089A269C",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testnewlambdaeventbridge2LambdaFunctionServiceRole9080FD47",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testnewlambdaeventbridge2LambdaFunctionServiceRole9080FD47": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testnewlambdaeventbridge2LambdaFunctionServiceRoleDefaultPolicyE191BB7B": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testnewlambdaeventbridge2CustomEventBus089A269C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testnewlambdaeventbridge2LambdaFunctionServiceRoleDefaultPolicyE191BB7B",
        "Roles": Array [
          Object {
            "Ref": "testnewlambdaeventbridge2LambdaFunctionServiceRole9080FD47",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
