{
 "Resources": {
  "integtestvpctestC226BCDB": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test"
     }
    ]
   }
  },
  "integtestvpctestisolatedSubnet1Subnet5A24123C": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/24",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/isolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestvpctestisolatedSubnet1RouteTable2A4FE9B0": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/isolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestvpctestisolatedSubnet1RouteTableAssociationE8B86D3B": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "integtestvpctestisolatedSubnet1RouteTable2A4FE9B0"
    },
    "SubnetId": {
     "Ref": "integtestvpctestisolatedSubnet1Subnet5A24123C"
    }
   }
  },
  "integtestvpctestisolatedSubnet2SubnetD8536FF8": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.1.0/24",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/isolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestvpctestisolatedSubnet2RouteTable496F73FE": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/isolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestvpctestisolatedSubnet2RouteTableAssociation32520725": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "integtestvpctestisolatedSubnet2RouteTable496F73FE"
    },
    "SubnetId": {
     "Ref": "integtestvpctestisolatedSubnet2SubnetD8536FF8"
    }
   }
  },
  "integtestvpctestRestrictDefaultSecurityGroupCustomResourceAF1F4DBD": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "integtestvpctestC226BCDB",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "integtestvpctestflowlogtestIAMRole890D5973": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "vpc-flow-logs.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/flowlog-test"
     }
    ]
   }
  },
  "integtestvpctestflowlogtestIAMRoleDefaultPolicyD28F6B03": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "integtestvpctestflowlogtestLogGroupF847B474",
         "Arn"
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "integtestvpctestflowlogtestIAMRole890D5973",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "integtestvpctestflowlogtestIAMRoleDefaultPolicyD28F6B03",
    "Roles": [
     {
      "Ref": "integtestvpctestflowlogtestIAMRole890D5973"
     }
    ]
   }
  },
  "integtestvpctestflowlogtestLogGroupF847B474": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 731,
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/flowlog-test"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "integtestvpctestflowlogtestFlowLogE4CFB5D7": {
   "Type": "AWS::EC2::FlowLog",
   "Properties": {
    "DeliverLogsPermissionArn": {
     "Fn::GetAtt": [
      "integtestvpctestflowlogtestIAMRole890D5973",
      "Arn"
     ]
    },
    "LogDestinationType": "cloud-watch-logs",
    "LogGroupName": {
     "Ref": "integtestvpctestflowlogtestLogGroupF847B474"
    },
    "ResourceId": {
     "Ref": "integtestvpctestC226BCDB"
    },
    "ResourceType": "VPC",
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test/flowlog-test"
     }
    ],
    "TrafficType": "ALL"
   }
  },
  "integtestvpctestBEDROCK89799045": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "integtestintegtestBEDROCKsecuritygroup5ED290E1",
       "GroupId"
      ]
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".bedrock"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "integtestvpctestisolatedSubnet1Subnet5A24123C"
     },
     {
      "Ref": "integtestvpctestisolatedSubnet2SubnetD8536FF8"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test"
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestvpctestSQS51FFC3C3": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "integtestintegtestSQSsecuritygroup71442008",
       "GroupId"
      ]
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".sqs"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "integtestvpctestisolatedSubnet1Subnet5A24123C"
     },
     {
      "Ref": "integtestvpctestisolatedSubnet2SubnetD8536FF8"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "facvpc-with-cidr-mask-and-endpoints/integ-test/vpc-test"
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   }
  },
  "integtestintegtestBEDROCKsecuritygroup5ED290E1": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "facvpc-with-cidr-mask-and-endpoints/integ-test/integ-test-BEDROCK-security-group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Fn::GetAtt": [
        "integtestvpctestC226BCDB",
        "CidrBlock"
       ]
      },
      "Description": {
       "Fn::Join": [
        "",
        [
         "from ",
         {
          "Fn::GetAtt": [
           "integtestvpctestC226BCDB",
           "CidrBlock"
          ]
         },
         ":443"
        ]
       ]
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
      },
      {
       "id": "W40",
       "reason": "Egress IPProtocol of -1 is default and generally considered OK"
      }
     ]
    }
   }
  },
  "integtestintegtestSQSsecuritygroup71442008": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "facvpc-with-cidr-mask-and-endpoints/integ-test/integ-test-SQS-security-group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Fn::GetAtt": [
        "integtestvpctestC226BCDB",
        "CidrBlock"
       ]
      },
      "Description": {
       "Fn::Join": [
        "",
        [
         "from ",
         {
          "Fn::GetAtt": [
           "integtestvpctestC226BCDB",
           "CidrBlock"
          ]
         },
         ":443"
        ]
       ]
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "integtestvpctestC226BCDB"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
      },
      {
       "id": "W40",
       "reason": "Egress IPProtocol of -1 is default and generally considered OK"
      }
     ]
    }
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "integtestvpctestC226BCDB",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": []
    }
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ]
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs22.x"
   },
   "ap-east-1": {
    "value": "nodejs22.x"
   },
   "ap-east-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-1": {
    "value": "nodejs22.x"
   },
   "ap-northeast-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-3": {
    "value": "nodejs22.x"
   },
   "ap-south-1": {
    "value": "nodejs22.x"
   },
   "ap-south-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-1": {
    "value": "nodejs22.x"
   },
   "ap-southeast-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-3": {
    "value": "nodejs22.x"
   },
   "ap-southeast-4": {
    "value": "nodejs22.x"
   },
   "ap-southeast-5": {
    "value": "nodejs22.x"
   },
   "ap-southeast-6": {
    "value": "nodejs22.x"
   },
   "ap-southeast-7": {
    "value": "nodejs22.x"
   },
   "ca-central-1": {
    "value": "nodejs22.x"
   },
   "ca-west-1": {
    "value": "nodejs22.x"
   },
   "cn-north-1": {
    "value": "nodejs22.x"
   },
   "cn-northwest-1": {
    "value": "nodejs22.x"
   },
   "eu-central-1": {
    "value": "nodejs22.x"
   },
   "eu-central-2": {
    "value": "nodejs22.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs22.x"
   },
   "eu-north-1": {
    "value": "nodejs22.x"
   },
   "eu-south-1": {
    "value": "nodejs22.x"
   },
   "eu-south-2": {
    "value": "nodejs22.x"
   },
   "eu-west-1": {
    "value": "nodejs22.x"
   },
   "eu-west-2": {
    "value": "nodejs22.x"
   },
   "eu-west-3": {
    "value": "nodejs22.x"
   },
   "eusc-de-east-1": {
    "value": "nodejs22.x"
   },
   "il-central-1": {
    "value": "nodejs22.x"
   },
   "me-central-1": {
    "value": "nodejs22.x"
   },
   "me-south-1": {
    "value": "nodejs22.x"
   },
   "mx-central-1": {
    "value": "nodejs22.x"
   },
   "sa-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-2": {
    "value": "nodejs22.x"
   },
   "us-gov-east-1": {
    "value": "nodejs22.x"
   },
   "us-gov-west-1": {
    "value": "nodejs22.x"
   },
   "us-iso-east-1": {
    "value": "nodejs22.x"
   },
   "us-iso-west-1": {
    "value": "nodejs22.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-isob-west-1": {
    "value": "nodejs18.x"
   },
   "us-isof-east-1": {
    "value": "nodejs22.x"
   },
   "us-isof-south-1": {
    "value": "nodejs22.x"
   },
   "us-west-1": {
    "value": "nodejs22.x"
   },
   "us-west-2": {
    "value": "nodejs22.x"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}