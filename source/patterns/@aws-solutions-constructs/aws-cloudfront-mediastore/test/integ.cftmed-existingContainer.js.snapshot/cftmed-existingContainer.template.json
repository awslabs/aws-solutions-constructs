{
 "Description": "Integration test for aws-cloudfront-mediastore with existing mediastore container",
 "Resources": {
  "MyMediaStoreContainer": {
   "Type": "AWS::MediaStore::Container",
   "Properties": {
    "ContainerName": "MyExistingMediaStoreContainer"
   }
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W35",
       "reason": "This S3 bucket is used as the access logging bucket for another bucket"
      }
     ]
    }
   }
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLogPolicy7B05AE89": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
           "Arn"
          ]
         }
        },
        "StringEquals": {
         "aws:SourceAccount": {
          "Ref": "AWS::AccountId"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "logging.s3.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLogAutoDeleteObjectsCustomResourceAE9C7ABE": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116"
    }
   },
   "DependsOn": [
    "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLogPolicy7B05AE89"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "AccessControl": "LogDeliveryWrite",
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "LoggingConfiguration": {
     "DestinationBucketName": {
      "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116"
     }
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketPolicyF3B44DFD": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "testcloudfrontmediastoreCloudfrontLoggingBucketAutoDeleteObjectsCustomResource15EAC955": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A"
    }
   },
   "DependsOn": [
    "testcloudfrontmediastoreCloudfrontLoggingBucketPolicyF3B44DFD"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testcloudfrontmediastoreCloudfrontOriginRequestPolicyA1D988D3": {
   "Type": "AWS::CloudFront::OriginRequestPolicy",
   "Properties": {
    "OriginRequestPolicyConfig": {
     "Comment": "Policy for Constructs CloudFrontDistributionForMediaStore",
     "CookiesConfig": {
      "CookieBehavior": "none"
     },
     "HeadersConfig": {
      "HeaderBehavior": "whitelist",
      "Headers": [
       "Access-Control-Allow-Origin",
       "Access-Control-Request-Method",
       "Access-Control-Request-Header",
       "Origin"
      ]
     },
     "Name": {
      "Fn::Join": [
       "",
       [
        {
         "Ref": "AWS::StackName"
        },
        "-",
        {
         "Ref": "AWS::Region"
        },
        "-CloudFrontDistributionForMediaStore"
       ]
      ]
     },
     "QueryStringsConfig": {
      "QueryStringBehavior": "all"
     }
    }
   }
  },
  "testcloudfrontmediastoreSetHttpSecurityHeaders9995A63D": {
   "Type": "AWS::CloudFront::Function",
   "Properties": {
    "AutoPublish": true,
    "FunctionCode": "function handler(event) { var response = event.response; var headers = response.headers; headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; headers['content-security-policy'] = { value: \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\"}; headers['x-content-type-options'] = { value: 'nosniff'}; headers['x-frame-options'] = {value: 'DENY'}; headers['x-xss-protection'] = {value: '1; mode=block'}; return response; }",
    "FunctionConfig": {
     "Comment": "SetHttpSecurityHeadersc81c3292af2c681c7c1a90878198ca9e244a6d4b59",
     "Runtime": "cloudfront-js-1.0"
    },
    "Name": "SetHttpSecurityHeadersc81c3292af2c681c7c1a90878198ca9e244a6d4b59"
   }
  },
  "testcloudfrontmediastoreCloudFrontDistributionED9265B1": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD",
       "OPTIONS"
      ],
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "CachedMethods": [
       "GET",
       "HEAD",
       "OPTIONS"
      ],
      "Compress": true,
      "FunctionAssociations": [
       {
        "EventType": "viewer-response",
        "FunctionARN": {
         "Fn::GetAtt": [
          "testcloudfrontmediastoreSetHttpSecurityHeaders9995A63D",
          "FunctionARN"
         ]
        }
       }
      ],
      "OriginRequestPolicyId": {
       "Ref": "testcloudfrontmediastoreCloudfrontOriginRequestPolicyA1D988D3"
      },
      "TargetOriginId": "cftmedexistingContainertestcloudfrontmediastoreCloudFrontDistributionOrigin197FFCE03",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Logging": {
      "Bucket": {
       "Fn::GetAtt": [
        "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
        "RegionalDomainName"
       ]
      }
     },
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::Select": [
             1,
             {
              "Fn::Split": [
               "://",
               {
                "Fn::GetAtt": [
                 "MyMediaStoreContainer",
                 "Endpoint"
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       },
       "Id": "cftmedexistingContainertestcloudfrontmediastoreCloudFrontDistributionOrigin197FFCE03"
      }
     ]
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W70",
       "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
      }
     ]
    }
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketAccessLog907A8116"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "CDK generated custom resource"
      },
      {
       "id": "W89",
       "reason": "CDK generated custom resource"
      },
      {
       "id": "W92",
       "reason": "CDK generated custom resource"
      }
     ]
    }
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}