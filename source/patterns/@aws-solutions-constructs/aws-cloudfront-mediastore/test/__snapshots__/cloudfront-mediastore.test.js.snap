// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test the default deployment snapshot 1`] = `
Object {
  "Resources": Object {
    "testcloudfrontmediastoreCloudFrontDistributionED9265B1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": Object {
        "DistributionConfig": Object {
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
            ],
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "CachedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
            ],
            "Compress": true,
            "LambdaFunctionAssociations": Array [
              Object {
                "EventType": "origin-response",
                "LambdaFunctionARN": Object {
                  "Ref": "testcloudfrontmediastoreSetHttpSecurityHeadersVersionE87B65C3",
                },
              },
            ],
            "OriginRequestPolicyId": Object {
              "Ref": "testcloudfrontmediastoreCloudfrontOriginRequestPolicyA1D988D3",
            },
            "TargetOriginId": "testcloudfrontmediastoreCloudFrontDistributionOrigin1BBFA2A4D",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::Select": Array [
                  0,
                  Object {
                    "Fn::Split": Array [
                      "/",
                      Object {
                        "Fn::Select": Array [
                          1,
                          Object {
                            "Fn::Split": Array [
                              "://",
                              Object {
                                "Fn::GetAtt": Array [
                                  "testcloudfrontmediastoreMediaStoreContainerF60A96BB",
                                  "Endpoint",
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "testcloudfrontmediastoreCloudFrontDistributionOrigin1BBFA2A4D",
              "OriginCustomHeaders": Array [
                Object {
                  "HeaderName": "User-Agent",
                  "HeaderValue": Object {
                    "Ref": "testcloudfrontmediastoreCloudFrontOriginAccessIdentity966405A0",
                  },
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "testcloudfrontmediastoreCloudFrontOriginAccessIdentity966405A0": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": Object {
            "Fn::Join": Array [
              "",
              Array [
                "access-identity-",
                Object {
                  "Ref": "AWS::Region",
                },
                "-",
                Object {
                  "Ref": "AWS::StackName",
                },
              ],
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for CloudFront Distribution",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "testcloudfrontmediastoreCloudfrontLoggingBucketPolicyF3B44DFD": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testcloudfrontmediastoreCloudfrontLoggingBucketA3A51E6A",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "testcloudfrontmediastoreCloudfrontOriginRequestPolicyA1D988D3": Object {
      "Properties": Object {
        "OriginRequestPolicyConfig": Object {
          "Comment": "Policy for Constructs CloudFrontDistributionForMediaStore",
          "CookiesConfig": Object {
            "CookieBehavior": "none",
          },
          "HeadersConfig": Object {
            "HeaderBehavior": "whitelist",
            "Headers": Array [
              "Access-Control-Allow-Origin",
              "Access-Control-Request-Method",
              "Access-Control-Request-Header",
              "Origin",
            ],
          },
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
                "-CloudFrontDistributionForMediaStore",
              ],
            ],
          },
          "QueryStringsConfig": Object {
            "QueryStringBehavior": "all",
          },
        },
      },
      "Type": "AWS::CloudFront::OriginRequestPolicy",
    },
    "testcloudfrontmediastoreMediaStoreContainerF60A96BB": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccessLoggingEnabled": true,
        "ContainerName": Object {
          "Ref": "AWS::StackName",
        },
        "CorsPolicy": Array [
          Object {
            "AllowedHeaders": Array [
              "*",
            ],
            "AllowedMethods": Array [
              "GET",
            ],
            "AllowedOrigins": Array [
              "*",
            ],
            "ExposeHeaders": Array [
              "*",
            ],
            "MaxAgeSeconds": 3000,
          },
        ],
        "LifecyclePolicy": "{\\"rules\\":[{\\"definition\\":{\\"path\\":[{\\"wildcard\\":\\"*\\"}],\\"days_since_create\\":[{\\"numeric\\":[\\">\\",30]}]},\\"action\\":\\"EXPIRE\\"}]}",
        "MetricPolicy": Object {
          "ContainerLevelMetrics": "ENABLED",
        },
        "Policy": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Sid\\":\\"MediaStoreDefaultPolicy\\",\\"Effect\\":\\"Allow\\",\\"Principal\\":\\"*\\",\\"Action\\":[\\"mediastore:GetObject\\",\\"mediastore:DescribeObject\\"],\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":mediastore:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":container/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/*\\",\\"Condition\\":{\\"Bool\\":{\\"aws:UserAgent\\":\\"",
              Object {
                "Ref": "testcloudfrontmediastoreCloudFrontOriginAccessIdentity966405A0",
              },
              "\\",\\"aws:SecureTransport\\":\\"true\\"}}}]}",
            ],
          ],
        },
      },
      "Type": "AWS::MediaStore::Container",
    },
    "testcloudfrontmediastoreSetHttpSecurityHeaders9995A63D": Object {
      "DependsOn": Array [
        "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRoleDefaultPolicy73DF1407",
        "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRole2F1F5449",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context, callback) => {           const response = event.Records[0].cf.response;           const headers = response.headers;           headers['x-xss-protection'] = [             {               key: 'X-XSS-Protection',               value: '1; mode=block'             }           ];           headers['x-frame-options'] = [             {               key: 'X-Frame-Options',               value: 'DENY'             }           ];           headers['x-content-type-options'] = [             {               key: 'X-Content-Type-Options',               value: 'nosniff'             }           ];           headers['strict-transport-security'] = [             {               key: 'Strict-Transport-Security',               value: 'max-age=63072000; includeSubdomains; preload'             }           ];           headers['referrer-policy'] = [             {               key: 'Referrer-Policy',               value: 'same-origin'             }           ];           headers['content-security-policy'] = [             {               key: 'Content-Security-Policy',               value: \\"default-src 'none'; base-uri 'self'; img-src 'self'; script-src 'self'; style-src 'self' https:; object-src 'none'; frame-ancestors 'none'; font-src 'self' https:; form-action 'self'; manifest-src 'self'; connect-src 'self'\\"              }           ];           callback(null, response);         };",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRole2F1F5449",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRole2F1F5449": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "edgelambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRoleDefaultPolicy73DF1407": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRoleDefaultPolicy73DF1407",
        "Roles": Array [
          Object {
            "Ref": "testcloudfrontmediastoreSetHttpSecurityHeadersServiceRole2F1F5449",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testcloudfrontmediastoreSetHttpSecurityHeadersVersionE87B65C3": Object {
      "Properties": Object {
        "FunctionName": Object {
          "Ref": "testcloudfrontmediastoreSetHttpSecurityHeaders9995A63D",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
  },
}
`;
