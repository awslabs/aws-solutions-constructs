// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pattern deployment with existing Lambda function, new SageMaker endpoint, deployVpc = false 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "LambdaFunctionBF21E41F": Object {
      "DependsOn": Array [
        "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "LambdaFunctionServiceRole0C4CDE0B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "LambdaFunctionServiceRole0C4CDE0B",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionServiceRole0C4CDE0B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaFunctionServiceRoleDefaultPolicy126C8897": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "Roles": Array [
          Object {
            "Ref": "LambdaFunctionServiceRole0C4CDE0B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with existing Lambda function, new SageMaker endpoint, deployVpc = true and deployNatGateway = false 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "LambdaFunctionBF21E41F": Object {
      "DependsOn": Array [
        "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "LambdaFunctionServiceRole0C4CDE0B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "LambdaFunctionServiceRole0C4CDE0B",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionServiceRole0C4CDE0B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaFunctionServiceRoleDefaultPolicy126C8897": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "Roles": Array [
          Object {
            "Ref": "LambdaFunctionServiceRole0C4CDE0B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ReplaceEndpointDefaultSecurityGroupCF0CCAF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/ReplaceEndpointDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcFlowLog8FF33A73": Object {
      "Properties": Object {
        "DeliverLogsPermissionArn": Object {
          "Fn::GetAtt": Array [
            "VpcFlowLogIAMRole6A475D41",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": Object {
          "Ref": "VpcFlowLogLogGroup7B5C56B9",
        },
        "ResourceId": Object {
          "Ref": "Vpc8378EB38",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VpcFlowLogIAMRole6A475D41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": Array [
          Object {
            "Ref": "VpcFlowLogIAMRole6A475D41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VpcFlowLogLogGroup7B5C56B9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "VpcIsolatedSubnet1RouteTable4771E3E5": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet1SubnetE48C5737": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcIsolatedSubnet2RouteTable1D30AF7D": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet2Subnet16364B91",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet2Subnet16364B91": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3A5408339": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcSAGEMAKERRUNTIME337E125A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ReplaceEndpointDefaultSecurityGroupCF0CCAF1",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".sagemaker.runtime",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceModelDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
            },
            Object {
              "Ref": "VpcIsolatedSubnet2Subnet16364B91",
            },
          ],
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with existing Lambda function, new SageMaker endpoint, deployVpc = true and deployNatGateway = true 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "LambdaFunctionBF21E41F": Object {
      "DependsOn": Array [
        "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "LambdaFunctionServiceRole0C4CDE0B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "LambdaFunctionServiceRole0C4CDE0B",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionServiceRole0C4CDE0B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaFunctionServiceRoleDefaultPolicy126C8897": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaFunctionServiceRoleDefaultPolicy126C8897",
        "Roles": Array [
          Object {
            "Ref": "LambdaFunctionServiceRole0C4CDE0B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ReplaceEndpointDefaultSecurityGroupCF0CCAF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/ReplaceEndpointDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcFlowLog8FF33A73": Object {
      "Properties": Object {
        "DeliverLogsPermissionArn": Object {
          "Fn::GetAtt": Array [
            "VpcFlowLogIAMRole6A475D41",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": Object {
          "Ref": "VpcFlowLogLogGroup7B5C56B9",
        },
        "ResourceId": Object {
          "Ref": "Vpc8378EB38",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VpcFlowLogIAMRole6A475D41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": Array [
          Object {
            "Ref": "VpcFlowLogIAMRole6A475D41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VpcFlowLogLogGroup7B5C56B9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.32.0/20",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.48.0/20",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W33",
              "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true",
            },
          ],
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/20",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W33",
              "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true",
            },
          ],
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.16.0/20",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3A5408339": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
          },
          Object {
            "Ref": "VpcPrivateSubnet2RouteTableA678073B",
          },
          Object {
            "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
          },
          Object {
            "Ref": "VpcPublicSubnet2RouteTable94F7E489",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcSAGEMAKERRUNTIME337E125A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ReplaceEndpointDefaultSecurityGroupCF0CCAF1",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".sagemaker.runtime",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          Object {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceModelDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "VpcPrivateSubnet1Subnet536B997A",
            },
            Object {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
            },
          ],
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with new Lambda function and existingSageMakerendpointObj (no vpc) 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "EncryptionKey1B843E66": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "SageMakerEndpoint": Object {
      "DependsOn": Array [
        "SageMakerEndpointConfig",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "SageMakerEndpointConfig",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "SageMakerEndpointConfig": Object {
      "DependsOn": Array [
        "SageMakerModel",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "EncryptionKey1B843E66",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "SageMakerModel",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "SageMakerModel": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerLambdaFunction661E043F": Object {
      "DependsOn": Array [
        "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "SageMakerEndpoint",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testlambdasagemakerLambdaFunctionServiceRole4BA038CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SageMakerEndpoint",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "Roles": Array [
          Object {
            "Ref": "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`Pattern deployment with new Lambda function with existingVpcObj and deployNatGateway = false 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "ReplaceEndpointDefaultSecurityGroupCF0CCAF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/ReplaceEndpointDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcFlowLog8FF33A73": Object {
      "Properties": Object {
        "DeliverLogsPermissionArn": Object {
          "Fn::GetAtt": Array [
            "VpcFlowLogIAMRole6A475D41",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": Object {
          "Ref": "VpcFlowLogLogGroup7B5C56B9",
        },
        "ResourceId": Object {
          "Ref": "Vpc8378EB38",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VpcFlowLogIAMRole6A475D41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": Array [
          Object {
            "Ref": "VpcFlowLogIAMRole6A475D41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VpcFlowLogLogGroup7B5C56B9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "VpcIsolatedSubnet1RouteTable4771E3E5": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet1SubnetE48C5737": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcIsolatedSubnet2RouteTable1D30AF7D": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet2Subnet16364B91",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet2Subnet16364B91": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3A5408339": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcSAGEMAKERRUNTIME337E125A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ReplaceEndpointDefaultSecurityGroupCF0CCAF1",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".sagemaker.runtime",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerLambdaFunction661E043F": Object {
      "DependsOn": Array [
        "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
            },
            Object {
              "Ref": "VpcIsolatedSubnet2Subnet16364B91",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testlambdasagemakerLambdaFunctionServiceRole4BA038CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "Roles": Array [
          Object {
            "Ref": "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceModelDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
            },
            Object {
              "Ref": "VpcIsolatedSubnet2Subnet16364B91",
            },
          ],
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with new Lambda function, new SageMaker endpoint, deployVpc = false 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerLambdaFunction661E043F": Object {
      "DependsOn": Array [
        "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testlambdasagemakerLambdaFunctionServiceRole4BA038CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "Roles": Array [
          Object {
            "Ref": "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with new Lambda function, new SageMaker endpoint, deployVpc = true and deployNatGateway = false 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "ReplaceEndpointDefaultSecurityGroupCF0CCAF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/ReplaceEndpointDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcFlowLog8FF33A73": Object {
      "Properties": Object {
        "DeliverLogsPermissionArn": Object {
          "Fn::GetAtt": Array [
            "VpcFlowLogIAMRole6A475D41",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": Object {
          "Ref": "VpcFlowLogLogGroup7B5C56B9",
        },
        "ResourceId": Object {
          "Ref": "Vpc8378EB38",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VpcFlowLogIAMRole6A475D41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": Array [
          Object {
            "Ref": "VpcFlowLogIAMRole6A475D41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VpcFlowLogLogGroup7B5C56B9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "VpcIsolatedSubnet1RouteTable4771E3E5": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet1SubnetE48C5737": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcIsolatedSubnet2RouteTable1D30AF7D": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
        },
        "SubnetId": Object {
          "Ref": "VpcIsolatedSubnet2Subnet16364B91",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet2Subnet16364B91": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3A5408339": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcSAGEMAKERRUNTIME337E125A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ReplaceEndpointDefaultSecurityGroupCF0CCAF1",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".sagemaker.runtime",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          Object {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerLambdaFunction661E043F": Object {
      "DependsOn": Array [
        "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
            },
            Object {
              "Ref": "VpcIsolatedSubnet2Subnet16364B91",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testlambdasagemakerLambdaFunctionServiceRole4BA038CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "Roles": Array [
          Object {
            "Ref": "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceModelDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
            },
            Object {
              "Ref": "VpcIsolatedSubnet2Subnet16364B91",
            },
          ],
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;

exports[`Pattern deployment with new Lambda function, new SageMaker endpoint, deployVpc = true and deployNatGateway = true 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efArtifactHash0D90A6C7": Object {
      "Description": "Artifact hash for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9": Object {
      "Description": "S3 bucket for asset \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
    "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F": Object {
      "Description": "S3 key for asset version \\"b3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240ef\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "ReplaceEndpointDefaultSecurityGroupCF0CCAF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/ReplaceEndpointDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SagemakerRole5FDB64E1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sagemaker.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSageMakerFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SagemakerRoleDefaultPolicy9DD21C3C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SagemakerRoleDefaultPolicy9DD21C3C",
        "Roles": Array [
          Object {
            "Ref": "SagemakerRole5FDB64E1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcFlowLog8FF33A73": Object {
      "Properties": Object {
        "DeliverLogsPermissionArn": Object {
          "Fn::GetAtt": Array [
            "VpcFlowLogIAMRole6A475D41",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": Object {
          "Ref": "VpcFlowLogLogGroup7B5C56B9",
        },
        "ResourceId": Object {
          "Ref": "Vpc8378EB38",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VpcFlowLogIAMRole6A475D41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": Array [
          Object {
            "Ref": "VpcFlowLogIAMRole6A475D41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VpcFlowLogLogGroup7B5C56B9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.32.0/20",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.48.0/20",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W33",
              "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true",
            },
          ],
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/20",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W33",
              "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true",
            },
          ],
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.16.0/20",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Default/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3A5408339": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
          },
          Object {
            "Ref": "VpcPrivateSubnet2RouteTableA678073B",
          },
          Object {
            "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
          },
          Object {
            "Ref": "VpcPublicSubnet2RouteTable94F7E489",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcSAGEMAKERRUNTIME337E125A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ReplaceEndpointDefaultSecurityGroupCF0CCAF1",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".sagemaker.runtime",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          Object {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "testlambdasagemakerEncryptionKey2AACF9E0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "testlambdasagemakerLambdaFunction661E043F": Object {
      "DependsOn": Array [
        "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3BucketD6CC88B9",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb3b649f7da1bf9e0df5dd89ba82b438f65af4f28d94fd83a45cc0524f50240efS3VersionKey0646987F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "ENDPOINT_NAME": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerEndpoint34AA4AB2",
                "EndpointName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VpcPrivateSubnet1Subnet536B997A",
            },
            Object {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testlambdasagemakerLambdaFunctionServiceRole4BA038CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sagemaker:InvokeEndpoint",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "testlambdasagemakerSageMakerEndpoint34AA4AB2",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testlambdasagemakerLambdaFunctionServiceRoleDefaultPolicy208C2512",
        "Roles": Array [
          Object {
            "Ref": "testlambdasagemakerLambdaFunctionServiceRole4BA038CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testlambdasagemakerReplaceDefaultSecurityGroup8B1F22EE": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK",
            },
            Object {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK",
            },
          ],
        },
      },
      "Properties": Object {
        "GroupDescription": "Default/test-lambda-sagemaker/ReplaceModelDefaultSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testlambdasagemakerSageMakerEndpoint34AA4AB2": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
      ],
      "Properties": Object {
        "EndpointConfigName": Object {
          "Fn::GetAtt": Array [
            "testlambdasagemakerSageMakerEndpointConfig56A24ED7",
            "EndpointConfigName",
          ],
        },
      },
      "Type": "AWS::SageMaker::Endpoint",
    },
    "testlambdasagemakerSageMakerEndpointConfig56A24ED7": Object {
      "DependsOn": Array [
        "testlambdasagemakerSageMakerModel27C04CC7",
      ],
      "Properties": Object {
        "KmsKeyId": Object {
          "Ref": "testlambdasagemakerEncryptionKey2AACF9E0",
        },
        "ProductionVariants": Array [
          Object {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m4.xlarge",
            "ModelName": Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerSageMakerModel27C04CC7",
                "ModelName",
              ],
            },
            "VariantName": "AllTraffic",
          },
        ],
      },
      "Type": "AWS::SageMaker::EndpointConfig",
    },
    "testlambdasagemakerSageMakerModel27C04CC7": Object {
      "DependsOn": Array [
        "SagemakerRoleDefaultPolicy9DD21C3C",
        "SagemakerRole5FDB64E1",
      ],
      "Properties": Object {
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "SagemakerRole5FDB64E1",
            "Arn",
          ],
        },
        "PrimaryContainer": Object {
          "Image": "<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest",
          "ModelDataUrl": "s3://<bucket-name>/<prefix>/model.tar.gz",
        },
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "testlambdasagemakerReplaceModelDefaultSecurityGroup7284AA24",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "VpcPrivateSubnet1Subnet536B997A",
            },
            Object {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
            },
          ],
        },
      },
      "Type": "AWS::SageMaker::Model",
    },
  },
}
`;
