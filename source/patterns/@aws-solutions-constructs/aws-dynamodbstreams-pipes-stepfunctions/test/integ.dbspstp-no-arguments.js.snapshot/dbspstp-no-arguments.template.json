{
 "Resources": {
  "lambdas3stptestServiceRoleF17BB6C7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "lambdas3stptest9FBDC6CE": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "exports.handler = async (event) => console.log(event)"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "lambdas3stptestServiceRoleF17BB6C7",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x"
   },
   "DependsOn": [
    "lambdas3stptestServiceRoleF17BB6C7"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "This Lambda Function is created for integration testing purposes only and is not part of an actual construct"
      },
      {
       "id": "W89",
       "reason": "This Lambda Function is created for integration testing purposes only and is not part of an actual construct"
      },
      {
       "id": "W92",
       "reason": "This Lambda Function is created for integration testing purposes only and is not part of an actual construct"
      }
     ]
    }
   }
  },
  "testddbspipesstatesconstructDynamoTable4F0DA5B6": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "StreamSpecification": {
     "StreamViewType": "NEW_AND_OLD_IMAGES"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "DYNAMODB_TABLE_ENCRYPTED_KMS"
     ]
    }
   }
  },
  "testddbspipesstatesconstructStateMachineLogGroup6986BB22": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/vendedlogs/states/constructs/dbspstp-no-argumentstest-ddbs-pipes-states-constructStateMachineLog-",
       {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Ref": "AWS::StackId"
           }
          ]
         }
        ]
       }
      ]
     ]
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "testddbspipesstatesconstructStateMachineRole04A3CFBB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "testddbspipesstatesconstructStateMachineRoleDefaultPolicyF472E1B9": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "lambdas3stptest9FBDC6CE",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "lambdas3stptest9FBDC6CE",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogDelivery",
        "logs:DeleteLogDelivery",
        "logs:DescribeLogGroups",
        "logs:DescribeResourcePolicies",
        "logs:GetLogDelivery",
        "logs:ListLogDeliveries",
        "logs:PutResourcePolicy",
        "logs:UpdateLogDelivery"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "testddbspipesstatesconstructStateMachineRoleDefaultPolicyF472E1B9",
    "Roles": [
     {
      "Ref": "testddbspipesstatesconstructStateMachineRole04A3CFBB"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "These are CDK defaults. The 'LogDelivery' actions do not support resource-level authorizations. Any logging is done by State Machine code"
      }
     ]
    }
   }
  },
  "testddbspipesstatesconstructStateMachine10DF8368": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"tasks3stp-test\",\"States\":{\"tasks3stp-test\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "lambdas3stptest9FBDC6CE",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}}}}"
      ]
     ]
    },
    "LoggingConfiguration": {
     "Destinations": [
      {
       "CloudWatchLogsLogGroup": {
        "LogGroupArn": {
         "Fn::GetAtt": [
          "testddbspipesstatesconstructStateMachineLogGroup6986BB22",
          "Arn"
         ]
        }
       }
      }
     ],
     "Level": "ERROR"
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "testddbspipesstatesconstructStateMachineRole04A3CFBB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "testddbspipesstatesconstructStateMachineRoleDefaultPolicyF472E1B9",
    "testddbspipesstatesconstructStateMachineRole04A3CFBB"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testddbspipesstatesconstructExecutionFailedAlarmC08BE65A": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmDescription": "Alarm for the number of executions that failed exceeded the threshold of 1. ",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "StateMachineArn",
      "Value": {
       "Ref": "testddbspipesstatesconstructStateMachine10DF8368"
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ExecutionsFailed",
    "Namespace": "AWS/States",
    "Period": 300,
    "Statistic": "Sum",
    "Threshold": 1
   }
  },
  "testddbspipesstatesconstructExecutionThrottledAlarm9ABEAF66": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmDescription": "Alarm for the number of executions that throttled exceeded the threshold of 1. ",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "StateMachineArn",
      "Value": {
       "Ref": "testddbspipesstatesconstructStateMachine10DF8368"
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ExecutionThrottled",
    "Namespace": "AWS/States",
    "Period": 300,
    "Statistic": "Sum",
    "Threshold": 1
   }
  },
  "testddbspipesstatesconstructExecutionAbortedAlarm19AB16F0": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmDescription": "Alarm for the number of executions that aborted exceeded the threshold of 1. ",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "StateMachineArn",
      "Value": {
       "Ref": "testddbspipesstatesconstructStateMachine10DF8368"
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ExecutionsAborted",
    "Namespace": "AWS/States",
    "Period": 300,
    "Statistic": "Maximum",
    "Threshold": 1
   }
  },
  "testddbspipesstatesconstructdlq43239DE7": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "KmsMasterKeyId": "alias/aws/sqs"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testddbspipesstatesconstructdlqPolicy82F4B6C5": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:AddPermission",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:ReceiveMessage",
        "sqs:RemovePermission",
        "sqs:SendMessage",
        "sqs:SetQueueAttributes"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": {
        "Fn::GetAtt": [
         "testddbspipesstatesconstructdlq43239DE7",
         "Arn"
        ]
       },
       "Sid": "QueueOwnerOnlyAccess"
      },
      {
       "Action": "SQS:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "testddbspipesstatesconstructdlq43239DE7",
         "Arn"
        ]
       },
       "Sid": "HttpsOnly"
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "testddbspipesstatesconstructdlq43239DE7"
     }
    ]
   }
  },
  "testddbspipesstatesconstructPipeRoletestddbspipesstatesconstructED65D64D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "pipes.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "dynamodb:DescribeStream",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:ListStreams"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "testddbspipesstatesconstructDynamoTable4F0DA5B6",
           "StreamArn"
          ]
         }
        },
        {
         "Action": "sqs:SendMessage",
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "testddbspipesstatesconstructdlq43239DE7",
           "Arn"
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "sourcePolicy"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "states:StartExecution",
         "Effect": "Allow",
         "Resource": {
          "Ref": "testddbspipesstatesconstructStateMachine10DF8368"
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "targetPolicy"
     }
    ]
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "testddbspipesstatesconstructLogGrouptestddbspipesstatesconstruct26A05CCF": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/vendedlogs/pipes/constructs/dbspstp-no-argumentstest-ddbs-pipes-states-constructPipesLog-",
       {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Ref": "AWS::StackId"
           }
          ]
         }
        ]
       }
      ]
     ]
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "testddbspipesstatesconstructpipetestddbspipesstatesconstruct436AF0AF": {
   "Type": "AWS::Pipes::Pipe",
   "Properties": {
    "LogConfiguration": {
     "CloudwatchLogsLogDestination": {
      "LogGroupArn": {
       "Fn::GetAtt": [
        "testddbspipesstatesconstructLogGrouptestddbspipesstatesconstruct26A05CCF",
        "Arn"
       ]
      }
     },
     "Level": "INFO"
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "testddbspipesstatesconstructPipeRoletestddbspipesstatesconstructED65D64D",
      "Arn"
     ]
    },
    "Source": {
     "Fn::GetAtt": [
      "testddbspipesstatesconstructDynamoTable4F0DA5B6",
      "StreamArn"
     ]
    },
    "SourceParameters": {
     "DynamoDBStreamParameters": {
      "DeadLetterConfig": {
       "Arn": {
        "Fn::GetAtt": [
         "testddbspipesstatesconstructdlq43239DE7",
         "Arn"
        ]
       }
      },
      "StartingPosition": "LATEST"
     }
    },
    "Target": {
     "Ref": "testddbspipesstatesconstructStateMachine10DF8368"
    },
    "TargetParameters": {
     "StepFunctionStateMachineParameters": {
      "InvocationType": "FIRE_AND_FORGET"
     }
    }
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}