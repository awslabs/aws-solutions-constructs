{
  "Resources": {
    "ApiGatewayToLambdaLambdaFunctionServiceRoleD76076A6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "ApiGatewayToLambdaLambdaFunctionServiceRoleDefaultPolicyE794FE8B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiGatewayToLambdaLambdaFunctionServiceRoleDefaultPolicyE794FE8B",
        "Roles": [
          {
            "Ref": "ApiGatewayToLambdaLambdaFunctionServiceRoleD76076A6"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
            }
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaFunction8FD06B36": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420S3Bucket749AC458"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420S3VersionKeyFF5CC16D"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420S3VersionKeyFF5CC16D"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaFunctionServiceRoleD76076A6",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "ApiGatewayToLambdaLambdaFunctionServiceRoleDefaultPolicyE794FE8B",
        "ApiGatewayToLambdaLambdaFunctionServiceRoleD76076A6"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
            },
            {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries"
            },
            {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients"
            }
          ]
        }
      }
    },
    "ApiGatewayToLambdaApiAccessLogGroupE2B41502": {
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
            },
            {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
            }
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiF114AB02": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Name": "LambdaRestApi"
      }
    },
    "ApiGatewayToLambdaLambdaRestApiDeployment2DD5F130c089f81fa2c74583d69b5e3ed35351b5": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "ApiGatewayToLambdaLambdaRestApiproxyANY6F82FBD9",
        "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24",
        "ApiGatewayToLambdaLambdaRestApiANYBCB30DDA"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W45",
              "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checkes for it in AWS::ApiGateway::Deployment resource"
            }
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
        },
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiGatewayToLambdaApiAccessLogGroupE2B41502",
              "Arn"
            ]
          },
          "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
        },
        "DeploymentId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiDeployment2DD5F130c089f81fa2c74583d69b5e3ed35351b5"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "StageName": "prod",
        "TracingEnabled": true
      }
    },
    "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaRestApiF114AB02",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionexistingwaftomultiplegatewaysApiGatewayToLambdaLambdaRestApiC1C488E0ANYproxyB0220BA3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaFunction8FD06B36",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
              },
              "/",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionTestexistingwaftomultiplegatewaysApiGatewayToLambdaLambdaRestApiC1C488E0ANYproxy20A46C0B": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaFunction8FD06B36",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
              },
              "/test-invoke-stage/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiproxyANY6F82FBD9": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24"
        },
        "RestApiId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
        },
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiGatewayToLambdaLambdaFunction8FD06B36",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiANYApiPermissionexistingwaftomultiplegatewaysApiGatewayToLambdaLambdaRestApiC1C488E0ANYD853550C": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaFunction8FD06B36",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
              },
              "/",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
              },
              "/*/"
            ]
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiANYApiPermissionTestexistingwaftomultiplegatewaysApiGatewayToLambdaLambdaRestApiC1C488E0ANYE0411C00": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaFunction8FD06B36",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
              },
              "/test-invoke-stage/*/"
            ]
          ]
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiANYBCB30DDA": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaRestApiF114AB02",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
        },
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiGatewayToLambdaLambdaFunction8FD06B36",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "ApiGatewayToLambdaLambdaRestApiUsagePlanCD03FACA": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
            },
            "Stage": {
              "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
            },
            "Throttle": {}
          }
        ]
      }
    },
    "ApiGatewayToLambdaLambdaRestApiCloudWatchRole43F16710": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
          }
        ]
      }
    },
    "ApiGatewayToLambdaLambdaRestApiAccountF45E70A9": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayToLambdaLambdaRestApiCloudWatchRole43F16710",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApiGatewayToLambdaLambdaRestApiF114AB02"
      ]
    },
    "TheVPC92636AB0": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC"
          }
        ]
      }
    },
    "TheVPCPublicSubnet1Subnet770D4FF2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1a",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet1"
          }
        ]
      }
    },
    "TheVPCPublicSubnet1RouteTable17DA183D": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet1"
          }
        ]
      }
    },
    "TheVPCPublicSubnet1RouteTableAssociationE5186D77": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet1RouteTable17DA183D"
        },
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet1Subnet770D4FF2"
        }
      }
    },
    "TheVPCPublicSubnet1DefaultRoute6D26543F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet1RouteTable17DA183D"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "TheVPCIGWFA25CC08"
        }
      },
      "DependsOn": [
        "TheVPCVPCGWC9B93E30"
      ]
    },
    "TheVPCPublicSubnet1EIP4412F690": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet1"
          }
        ]
      }
    },
    "TheVPCPublicSubnet1NATGatewayC61D892B": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet1Subnet770D4FF2"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "TheVPCPublicSubnet1EIP4412F690",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet1"
          }
        ]
      }
    },
    "TheVPCPublicSubnet2Subnet73F96DA9": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.32.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1b",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet2"
          }
        ]
      }
    },
    "TheVPCPublicSubnet2RouteTable3609F42C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet2"
          }
        ]
      }
    },
    "TheVPCPublicSubnet2RouteTableAssociationB4B0A733": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet2RouteTable3609F42C"
        },
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet2Subnet73F96DA9"
        }
      }
    },
    "TheVPCPublicSubnet2DefaultRouteFEB062B2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet2RouteTable3609F42C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "TheVPCIGWFA25CC08"
        }
      },
      "DependsOn": [
        "TheVPCVPCGWC9B93E30"
      ]
    },
    "TheVPCPublicSubnet2EIP5AAFF9FA": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet2"
          }
        ]
      }
    },
    "TheVPCPublicSubnet2NATGatewayB437CFAF": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet2Subnet73F96DA9"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "TheVPCPublicSubnet2EIP5AAFF9FA",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet2"
          }
        ]
      }
    },
    "TheVPCPublicSubnet3Subnet7C1E748F": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1c",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet3"
          }
        ]
      }
    },
    "TheVPCPublicSubnet3RouteTable679ADB47": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet3"
          }
        ]
      }
    },
    "TheVPCPublicSubnet3RouteTableAssociationACA3F606": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet3RouteTable679ADB47"
        },
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet3Subnet7C1E748F"
        }
      }
    },
    "TheVPCPublicSubnet3DefaultRoute326CE968": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPublicSubnet3RouteTable679ADB47"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "TheVPCIGWFA25CC08"
        }
      },
      "DependsOn": [
        "TheVPCVPCGWC9B93E30"
      ]
    },
    "TheVPCPublicSubnet3EIPE3930834": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet3"
          }
        ]
      }
    },
    "TheVPCPublicSubnet3NATGateway3A4A718F": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "TheVPCPublicSubnet3Subnet7C1E748F"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "TheVPCPublicSubnet3EIPE3930834",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PublicSubnet3"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet1Subnet571D3690": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.96.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1a",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet1"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet1RouteTableF6513BC2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet1"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet1RouteTableAssociation46F1FFFC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet1RouteTableF6513BC2"
        },
        "SubnetId": {
          "Ref": "TheVPCPrivateSubnet1Subnet571D3690"
        }
      }
    },
    "TheVPCPrivateSubnet1DefaultRouteD1B9E467": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet1RouteTableF6513BC2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "TheVPCPublicSubnet1NATGatewayC61D892B"
        }
      }
    },
    "TheVPCPrivateSubnet2SubnetCC3D7013": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1b",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet2"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet2RouteTable9AC81FAC": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet2"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet2RouteTableAssociation336D47D1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet2RouteTable9AC81FAC"
        },
        "SubnetId": {
          "Ref": "TheVPCPrivateSubnet2SubnetCC3D7013"
        }
      }
    },
    "TheVPCPrivateSubnet2DefaultRoute52A1F245": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet2RouteTable9AC81FAC"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "TheVPCPublicSubnet2NATGatewayB437CFAF"
        }
      }
    },
    "TheVPCPrivateSubnet3Subnet69CC2C6F": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.160.0/19",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "AvailabilityZone": "test-region-1c",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet3"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet3RouteTable1A0D1274": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC/PrivateSubnet3"
          }
        ]
      }
    },
    "TheVPCPrivateSubnet3RouteTableAssociation50EE5E34": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet3RouteTable1A0D1274"
        },
        "SubnetId": {
          "Ref": "TheVPCPrivateSubnet3Subnet69CC2C6F"
        }
      }
    },
    "TheVPCPrivateSubnet3DefaultRoute990F9A2A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "TheVPCPrivateSubnet3RouteTable1A0D1274"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "TheVPCPublicSubnet3NATGateway3A4A718F"
        }
      }
    },
    "TheVPCIGWFA25CC08": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/TheVPC"
          }
        ]
      }
    },
    "TheVPCVPCGWC9B93E30": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        },
        "InternetGatewayId": {
          "Ref": "TheVPCIGWFA25CC08"
        }
      }
    },
    "LB8A12904C": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "LBSecurityGroup8A41EA2B",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "TheVPCPublicSubnet1Subnet770D4FF2"
          },
          {
            "Ref": "TheVPCPublicSubnet2Subnet73F96DA9"
          },
          {
            "Ref": "TheVPCPublicSubnet3Subnet7C1E748F"
          }
        ],
        "Type": "application"
      },
      "DependsOn": [
        "TheVPCPublicSubnet1DefaultRoute6D26543F",
        "TheVPCPublicSubnet2DefaultRouteFEB062B2",
        "TheVPCPublicSubnet3DefaultRoute326CE968"
      ]
    },
    "LBSecurityGroup8A41EA2B": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB existingwaftomultiplegatewaysLB56516166",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        }
      }
    },
    "LBSecurityGrouptoexistingwaftomultiplegatewaysASGInstanceSecurityGroupC974A7A580807FE55815": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "LBSecurityGroup8A41EA2B",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "ASGInstanceSecurityGroup0525485D",
            "GroupId"
          ]
        },
        "FromPort": 8080,
        "ToPort": 8080
      }
    },
    "LBListener49E825B4": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "LBListenerApplicationFleetGroupF144153C"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LB8A12904C"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "LBListenerApplicationFleetGroupF144153C": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 8080,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        }
      }
    },
    "ASGInstanceSecurityGroup0525485D": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "existing-waf-to-multiple-gateways/ASG/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/ASG"
          }
        ],
        "VpcId": {
          "Ref": "TheVPC92636AB0"
        }
      }
    },
    "ASGInstanceSecurityGroupfromexistingwaftomultiplegatewaysLBSecurityGroup89D30D0A8080C2764550": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 8080,
        "GroupId": {
          "Fn::GetAtt": [
            "ASGInstanceSecurityGroup0525485D",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LBSecurityGroup8A41EA2B",
            "GroupId"
          ]
        },
        "ToPort": 8080
      }
    },
    "ASGInstanceRoleE263A41B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existing-waf-to-multiple-gateways/ASG"
          }
        ]
      }
    },
    "ASGInstanceProfile0A2834D7": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ASGInstanceRoleE263A41B"
          }
        ]
      }
    },
    "ASGLaunchConfigC00AF12B": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": {
          "Ref": "ASGInstanceProfile0A2834D7"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ASGInstanceSecurityGroup0525485D",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash"
        }
      },
      "DependsOn": [
        "ASGInstanceRoleE263A41B"
      ]
    },
    "ASG46ED3070": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "ASGLaunchConfigC00AF12B"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "existing-waf-to-multiple-gateways/ASG"
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "LBListenerApplicationFleetGroupF144153C"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "TheVPCPrivateSubnet1Subnet571D3690"
          },
          {
            "Ref": "TheVPCPrivateSubnet2SubnetCC3D7013"
          },
          {
            "Ref": "TheVPCPrivateSubnet3Subnet69CC2C6F"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "testwaf": {
      "Type": "AWS::WAFv2::WebACL",
      "Properties": {
        "DefaultAction": {
          "Allow": {}
        },
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "webACL",
          "SampledRequestsEnabled": true
        }
      }
    },
    "testWebACLAssociation": {
      "Type": "AWS::WAFv2::WebACLAssociation",
      "Properties": {
        "ResourceArn": {
          "Ref": "LB8A12904C"
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "testwaf",
            "Arn"
          ]
        }
      }
    },
    "existingwaftomultiplegatewaysWebACLAssociation": {
      "Type": "AWS::WAFv2::WebACLAssociation",
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              "::/restapis/",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
              },
              "/stages/",
              {
                "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
              }
            ]
          ]
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "testwaf",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ApiGatewayToLambdaLambdaRestApiEndpoint9800D4B5": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Parameters": {
    "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420S3Bucket749AC458": {
      "Type": "String",
      "Description": "S3 bucket for asset \"8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420\""
    },
    "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420S3VersionKeyFF5CC16D": {
      "Type": "String",
      "Description": "S3 key for asset version \"8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420\""
    },
    "AssetParameters8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420ArtifactHashA71E92AD": {
      "Type": "String",
      "Description": "Artifact hash for asset \"8efd3dd9643a4d64a128ad582cab718a1e464bcc719bbbcf0e7b0481188a0420\""
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2"
    }
  }
}