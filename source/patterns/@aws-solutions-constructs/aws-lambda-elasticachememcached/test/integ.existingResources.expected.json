{
  "Description": "Integration Test with existing vpc, Lambda function and cache",
  "Resources": {
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.168.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc"
          }
        ]
      }
    },
    "VpcisolatedSubnet1SubnetE62B1B9B": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "test-region-1a",
        "CidrBlock": "172.168.0.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet1RouteTableE442650B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet1RouteTableAssociationD259E31A": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet1RouteTableE442650B"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
        }
      }
    },
    "VpcisolatedSubnet2Subnet39217055": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "test-region-1b",
        "CidrBlock": "172.168.64.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet2RouteTable334F9764": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet2RouteTableAssociation25A4716F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet2RouteTable334F9764"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet2Subnet39217055"
        }
      }
    },
    "VpcisolatedSubnet3Subnet44F2537D": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "test-region-1c",
        "CidrBlock": "172.168.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "isolated"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet3"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet3RouteTableA2F6BBC0": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/isolatedSubnet3"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "VpcisolatedSubnet3RouteTableAssociationDC010BEB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcisolatedSubnet3RouteTableA2F6BBC0"
        },
        "SubnetId": {
          "Ref": "VpcisolatedSubnet3Subnet44F2537D"
        }
      }
    },
    "VpcFlowLogIAMRole6A475D41": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "vpc-flow-logs.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/FlowLog"
          }
        ]
      }
    },
    "VpcFlowLogIAMRoleDefaultPolicy406FB995": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VpcFlowLogLogGroup7B5C56B9",
                  "Arn"
                ]
              }
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VpcFlowLogIAMRole6A475D41",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
        "Roles": [
          {
            "Ref": "VpcFlowLogIAMRole6A475D41"
          }
        ]
      }
    },
    "VpcFlowLogLogGroup7B5C56B9": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 731,
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/FlowLog"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
            }
          ]
        }
      }
    },
    "VpcFlowLog8FF33A73": {
      "Type": "AWS::EC2::FlowLog",
      "Properties": {
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "VpcFlowLogIAMRole6A475D41",
            "Arn"
          ]
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": {
          "Ref": "VpcFlowLogLogGroup7B5C56B9"
        },
        "ResourceId": {
          "Ref": "Vpc8378EB38"
        },
        "ResourceType": "VPC",
        "Tags": [
          {
            "Key": "Name",
            "Value": "existingResources/Vpc/FlowLog"
          }
        ],
        "TrafficType": "ALL"
      }
    },
    "testsgsecuritygroup89DCF621": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "existingResources/test-sg-security-group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
            },
            {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK"
            }
          ]
        }
      }
    },
    "testfunctionServiceRoleFB85AD63": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "VpcisolatedSubnet1RouteTableAssociationD259E31A",
        "VpcisolatedSubnet2RouteTableAssociation25A4716F",
        "VpcisolatedSubnet3RouteTableAssociationDC010BEB"
      ]
    },
    "testfunction5B23D3B0": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "c1b23d6af38c04acb744bda25a3dc7f4394daea942c67eaff40911a707a3c37a.zip"
        },
        "Environment": {
          "Variables": {
            "CACHE_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "testcachecluster",
                      "ConfigurationEndpoint.Address"
                    ]
                  },
                  ":",
                  {
                    "Fn::GetAtt": [
                      "testcachecluster",
                      "ConfigurationEndpoint.Port"
                    ]
                  }
                ]
              ]
            }
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "testfunctionServiceRoleFB85AD63",
            "Arn"
          ]
        },
        "Runtime": "nodejs16.x",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "testsgsecuritygroup89DCF621",
                "GroupId"
              ]
            },
            {
              "Fn::GetAtt": [
                "testtestcachesg9F6CF9E2",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
            },
            {
              "Ref": "VpcisolatedSubnet2Subnet39217055"
            },
            {
              "Ref": "VpcisolatedSubnet3Subnet44F2537D"
            }
          ]
        }
      },
      "DependsOn": [
        "testfunctionServiceRoleFB85AD63",
        "VpcisolatedSubnet1RouteTableAssociationD259E31A",
        "VpcisolatedSubnet2RouteTableAssociation25A4716F",
        "VpcisolatedSubnet3RouteTableAssociationDC010BEB"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "Test Resource"
            },
            {
              "id": "W92",
              "reason": "Test Resource"
            }
          ]
        }
      }
    },
    "ecsubnetgrouptestcache": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "CacheSubnetGroupName": "test-cache-subnet-group",
        "Description": "Solutions Constructs generated Cache Subnet Group",
        "SubnetIds": [
          {
            "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
          },
          {
            "Ref": "VpcisolatedSubnet2Subnet39217055"
          },
          {
            "Ref": "VpcisolatedSubnet3Subnet44F2537D"
          }
        ]
      }
    },
    "testcachecachesg7265880E": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "existingResources/test-cache-cachesg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W40",
              "reason": "Test Resource"
            },
            {
              "id": "W5",
              "reason": "Test Resource"
            },
            {
              "id": "W36",
              "reason": "Test Resource"
            }
          ]
        }
      }
    },
    "testcachecluster": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "AZMode": "cross-az",
        "CacheNodeType": "cache.t3.medium",
        "CacheSubnetGroupName": "test-cache-subnet-group",
        "ClusterName": "test-cache-cdk-cluster",
        "Engine": "memcached",
        "NumCacheNodes": 2,
        "Port": 11222,
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "testcachecachesg7265880E",
              "GroupId"
            ]
          },
          {
            "Fn::GetAtt": [
              "testtestcachesg9F6CF9E2",
              "GroupId"
            ]
          }
        ]
      },
      "DependsOn": [
        "ecsubnetgrouptestcache"
      ]
    },
    "testtestcachesg9F6CF9E2": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "existingResources/test/test-cachesg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W5",
              "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
            },
            {
              "id": "W40",
              "reason": "Egress IPProtocol of -1 is default and generally considered OK"
            }
          ]
        }
      }
    },
    "testtestingress291C0179": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "Self referencing rule to control access to Elasticache memcached cluster",
        "FromPort": {
          "Fn::GetAtt": [
            "testcachecluster",
            "ConfigurationEndpoint.Port"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "testtestcachesg9F6CF9E2",
            "GroupId"
          ]
        },
        "IpProtocol": "TCP",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "testtestcachesg9F6CF9E2",
            "GroupId"
          ]
        },
        "ToPort": {
          "Fn::GetAtt": [
            "testcachecluster",
            "ConfigurationEndpoint.Port"
          ]
        }
      },
      "DependsOn": [
        "testtestcachesg9F6CF9E2"
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}