{
 "Description": "Integration Test with existing vpc, Lambda function and cache",
 "Resources": {
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "172.168.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc"
     }
    ]
   }
  },
  "VpcisolatedSubnet1SubnetE62B1B9B": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "172.168.0.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/isolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcisolatedSubnet1RouteTableE442650B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/isolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcisolatedSubnet1RouteTableAssociationD259E31A": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcisolatedSubnet1RouteTableE442650B"
    },
    "SubnetId": {
     "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
    }
   }
  },
  "VpcisolatedSubnet2Subnet39217055": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "172.168.64.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/isolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcisolatedSubnet2RouteTable334F9764": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/isolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcisolatedSubnet2RouteTableAssociation25A4716F": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcisolatedSubnet2RouteTable334F9764"
    },
    "SubnetId": {
     "Ref": "VpcisolatedSubnet2Subnet39217055"
    }
   }
  },
  "VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "Vpc8378EB38",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "VpcFlowLogIAMRole6A475D41": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "vpc-flow-logs.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/FlowLog"
     }
    ]
   }
  },
  "VpcFlowLogIAMRoleDefaultPolicy406FB995": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "VpcFlowLogLogGroup7B5C56B9",
         "Arn"
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "VpcFlowLogIAMRole6A475D41",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
    "Roles": [
     {
      "Ref": "VpcFlowLogIAMRole6A475D41"
     }
    ]
   }
  },
  "VpcFlowLogLogGroup7B5C56B9": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 731,
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/FlowLog"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "VpcFlowLog8FF33A73": {
   "Type": "AWS::EC2::FlowLog",
   "Properties": {
    "DeliverLogsPermissionArn": {
     "Fn::GetAtt": [
      "VpcFlowLogIAMRole6A475D41",
      "Arn"
     ]
    },
    "LogDestinationType": "cloud-watch-logs",
    "LogGroupName": {
     "Ref": "VpcFlowLogLogGroup7B5C56B9"
    },
    "ResourceId": {
     "Ref": "Vpc8378EB38"
    },
    "ResourceType": "VPC",
    "Tags": [
     {
      "Key": "Name",
      "Value": "lammem-existingResources/Vpc/FlowLog"
     }
    ],
    "TrafficType": "ALL"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "Vpc8378EB38",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "dd5711540f04e06aa955d7f4862fc04e8cdea464cb590dae91ed2976bb78098e.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "CDK generated custom resource"
      },
      {
       "id": "W89",
       "reason": "CDK generated custom resource"
      },
      {
       "id": "W92",
       "reason": "CDK generated custom resource"
      }
     ]
    }
   }
  },
  "testsgsecuritygroup89DCF621": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "lammem-existingResources/test-sg-security-group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
      },
      {
       "id": "W40",
       "reason": "Egress IPProtocol of -1 is default and generally considered OK"
      }
     ]
    }
   }
  },
  "testfunctionServiceRoleFB85AD63": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      ]
     }
    ]
   },
   "DependsOn": [
    "VpcisolatedSubnet1RouteTableAssociationD259E31A",
    "VpcisolatedSubnet2RouteTableAssociation25A4716F"
   ]
  },
  "testfunction5B23D3B0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c1b23d6af38c04acb744bda25a3dc7f4394daea942c67eaff40911a707a3c37a.zip"
    },
    "Environment": {
     "Variables": {
      "CACHE_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::GetAtt": [
           "testcachecluster",
           "ConfigurationEndpoint.Address"
          ]
         },
         ":",
         {
          "Fn::GetAtt": [
           "testcachecluster",
           "ConfigurationEndpoint.Port"
          ]
         }
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "testfunctionServiceRoleFB85AD63",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "testsgsecuritygroup89DCF621",
        "GroupId"
       ]
      },
      {
       "Fn::GetAtt": [
        "lammemexistingResourceslammemexistingResourcescachesg832A8E40",
        "GroupId"
       ]
      }
     ],
     "SubnetIds": [
      {
       "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
      },
      {
       "Ref": "VpcisolatedSubnet2Subnet39217055"
      }
     ]
    }
   },
   "DependsOn": [
    "testfunctionServiceRoleFB85AD63",
    "VpcisolatedSubnet1RouteTableAssociationD259E31A",
    "VpcisolatedSubnet2RouteTableAssociation25A4716F"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Test Resource"
      },
      {
       "id": "W92",
       "reason": "Test Resource"
      }
     ]
    }
   }
  },
  "ecsubnetgrouptestcache": {
   "Type": "AWS::ElastiCache::SubnetGroup",
   "Properties": {
    "CacheSubnetGroupName": "test-cache-subnet-group",
    "Description": "Solutions Constructs generated Cache Subnet Group",
    "SubnetIds": [
     {
      "Ref": "VpcisolatedSubnet1SubnetE62B1B9B"
     },
     {
      "Ref": "VpcisolatedSubnet2Subnet39217055"
     }
    ]
   }
  },
  "testcachecachesg7265880E": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "lammem-existingResources/test-cache-cachesg",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W40",
       "reason": "Test Resource"
      },
      {
       "id": "W5",
       "reason": "Test Resource"
      },
      {
       "id": "W36",
       "reason": "Test Resource"
      }
     ]
    }
   }
  },
  "testcachecluster": {
   "Type": "AWS::ElastiCache::CacheCluster",
   "Properties": {
    "AZMode": "cross-az",
    "CacheNodeType": "cache.t3.medium",
    "CacheSubnetGroupName": "test-cache-subnet-group",
    "ClusterName": "test-cache-cdk-cluster",
    "Engine": "memcached",
    "NumCacheNodes": 2,
    "Port": 11222,
    "VpcSecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "testcachecachesg7265880E",
       "GroupId"
      ]
     },
     {
      "Fn::GetAtt": [
       "lammemexistingResourceslammemexistingResourcescachesg832A8E40",
       "GroupId"
      ]
     }
    ]
   },
   "DependsOn": [
    "ecsubnetgrouptestcache"
   ]
  },
  "lammemexistingResourceslammemexistingResourcescachesg832A8E40": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "lammem-existingResources/lammem-existingResources/lammem-existingResources-cachesg",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Egress of 0.0.0.0/0 is default and generally considered OK"
      },
      {
       "id": "W40",
       "reason": "Egress IPProtocol of -1 is default and generally considered OK"
      }
     ]
    }
   }
  },
  "lammemexistingResourceslammemexistingResourcesingress225EA10E": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Self referencing rule to control access to Elasticache memcached cluster",
    "FromPort": {
     "Fn::GetAtt": [
      "testcachecluster",
      "ConfigurationEndpoint.Port"
     ]
    },
    "GroupId": {
     "Fn::GetAtt": [
      "lammemexistingResourceslammemexistingResourcescachesg832A8E40",
      "GroupId"
     ]
    },
    "IpProtocol": "TCP",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "lammemexistingResourceslammemexistingResourcescachesg832A8E40",
      "GroupId"
     ]
    },
    "ToPort": {
     "Fn::GetAtt": [
      "testcachecluster",
      "ConfigurationEndpoint.Port"
     ]
    }
   },
   "DependsOn": [
    "lammemexistingResourceslammemexistingResourcescachesg832A8E40"
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}