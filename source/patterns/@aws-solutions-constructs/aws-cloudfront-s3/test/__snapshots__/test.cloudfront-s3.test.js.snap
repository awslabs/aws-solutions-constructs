// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot test CloudFrontToS3 default params 1`] = `
Object {
  "Resources": Object {
    "testcloudfronts3CloudFrontDistribution0565DEE8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": Object {
        "DistributionConfig": Object {
          "DefaultCacheBehavior": Object {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "LambdaFunctionAssociations": Array [
              Object {
                "EventType": "origin-response",
                "LambdaFunctionARN": Object {
                  "Ref": "testcloudfronts3SetHttpSecurityHeadersVersionF1C744BB",
                },
              },
            ],
            "TargetOriginId": "testcloudfronts3CloudFrontDistributionOrigin124051039",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "testcloudfronts3CloudfrontLoggingBucket985C0FE8",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": Array [
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "testcloudfronts3S3BucketE0C5F76E",
                  "RegionalDomainName",
                ],
              },
              "Id": "testcloudfronts3CloudFrontDistributionOrigin124051039",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "testcloudfronts3CloudFrontDistributionOrigin1S3Origin4695F058",
                      },
                    ],
                  ],
                },
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "testcloudfronts3CloudFrontDistributionOrigin1S3Origin4695F058": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for testcloudfronts3CloudFrontDistributionOrigin124051039",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "testcloudfronts3CloudfrontLoggingBucket985C0FE8": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for CloudFront Distribution",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "testcloudfronts3CloudfrontLoggingBucketPolicyDF55851B": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "testcloudfronts3CloudfrontLoggingBucket985C0FE8",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testcloudfronts3CloudfrontLoggingBucket985C0FE8",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "testcloudfronts3S3BucketE0C5F76E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "testcloudfronts3S3LoggingBucket90D239DD",
          },
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "testcloudfronts3S3BucketPolicy250F1F61": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": Object {
        "Bucket": Object {
          "Ref": "testcloudfronts3S3BucketE0C5F76E",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testcloudfronts3S3BucketE0C5F76E",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "testcloudfronts3CloudFrontDistributionOrigin1S3Origin4695F058",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testcloudfronts3S3BucketE0C5F76E",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "testcloudfronts3S3LoggingBucket90D239DD": Object {
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "testcloudfronts3S3LoggingBucketPolicy529D4CFF": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "testcloudfronts3S3LoggingBucket90D239DD",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testcloudfronts3S3LoggingBucket90D239DD",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "testcloudfronts3SetHttpSecurityHeaders6C5A1E69": Object {
      "DependsOn": Array [
        "testcloudfronts3SetHttpSecurityHeadersServiceRoleDefaultPolicy7A7EF47A",
        "testcloudfronts3SetHttpSecurityHeadersServiceRole74D1E252",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context, callback) => {           const response = event.Records[0].cf.response;           const headers = response.headers;           headers['x-xss-protection'] = [             {               key: 'X-XSS-Protection',               value: '1; mode=block'             }           ];           headers['x-frame-options'] = [             {               key: 'X-Frame-Options',               value: 'DENY'             }           ];           headers['x-content-type-options'] = [             {               key: 'X-Content-Type-Options',               value: 'nosniff'             }           ];           headers['strict-transport-security'] = [             {               key: 'Strict-Transport-Security',               value: 'max-age=63072000; includeSubdomains; preload'             }           ];           headers['referrer-policy'] = [             {               key: 'Referrer-Policy',               value: 'same-origin'             }           ];           headers['content-security-policy'] = [             {               key: 'Content-Security-Policy',               value: \\"default-src 'none'; base-uri 'self'; img-src 'self'; script-src 'self'; style-src 'self' https:; object-src 'none'; frame-ancestors 'none'; font-src 'self' https:; form-action 'self'; manifest-src 'self'; connect-src 'self'\\"              }           ];           callback(null, response);         };",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testcloudfronts3SetHttpSecurityHeadersServiceRole74D1E252",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testcloudfronts3SetHttpSecurityHeadersServiceRole74D1E252": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "edgelambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testcloudfronts3SetHttpSecurityHeadersServiceRoleDefaultPolicy7A7EF47A": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testcloudfronts3SetHttpSecurityHeadersServiceRoleDefaultPolicy7A7EF47A",
        "Roles": Array [
          Object {
            "Ref": "testcloudfronts3SetHttpSecurityHeadersServiceRole74D1E252",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testcloudfronts3SetHttpSecurityHeadersVersionF1C744BB": Object {
      "Properties": Object {
        "FunctionName": Object {
          "Ref": "testcloudfronts3SetHttpSecurityHeaders6C5A1E69",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
  },
}
`;
