{
 "Description": "Integration Test for aws-openapigateway-lambda",
 "Resources": {
  "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleB5DC63A9": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleDefaultPolicy4563083B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleDefaultPolicy4563083B",
    "Roles": [
     {
      "Ref": "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleB5DC63A9"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaMessagesHandlerApiFunction0E78C5307": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "8ce85d10dcd7b8e6d43ffd909827afc76802ad40fcd7908886ff825cbe8e15df.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleB5DC63A9",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleDefaultPolicy4563083B",
    "OpenApiGatewayToLambdaMessagesHandlerApiFunction0ServiceRoleB5DC63A9"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaMessagesHandlerApiFunction0PermitAPIGInvocationB70BC520": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "OpenApiGatewayToLambdaMessagesHandlerApiFunction0E78C5307",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
       },
       "/*/*/*"
      ]
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleA572C749": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleDefaultPolicy389AA3BA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleDefaultPolicy389AA3BA",
    "Roles": [
     {
      "Ref": "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleA572C749"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaPhotosHandlerApiFunction1C42C52E8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "654d49d4ea47a6be417d57b94dc0310933d0e971a3e48a3080c3e48487af3e50.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleA572C749",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleDefaultPolicy389AA3BA",
    "OpenApiGatewayToLambdaPhotosHandlerApiFunction1ServiceRoleA572C749"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaPhotosHandlerApiFunction1PermitAPIGInvocationA20E40FB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "OpenApiGatewayToLambdaPhotosHandlerApiFunction1C42C52E8",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
       },
       "/*/*/*"
      ]
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaApiAccessLogGroupE21284EC": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaSpecRestApi27C18064": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Body": {
     "openapi": "3.0.1",
     "info": {
      "title": "api",
      "version": "2023-02-20T20:46:08Z"
     },
     "paths": {
      "/messages": {
       "get": {
        "x-amazon-apigateway-integration": {
         "httpMethod": "POST",
         "uri": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":apigateway:",
            {
             "Ref": "AWS::Region"
            },
            ":lambda:path/2015-03-31/functions/",
            {
             "Fn::GetAtt": [
              "OpenApiGatewayToLambdaMessagesHandlerApiFunction0E78C5307",
              "Arn"
             ]
            },
            "/invocations"
           ]
          ]
         },
         "passthroughBehavior": "when_no_match",
         "type": "aws_proxy"
        },
        "x-amazon-apigateway-auth": {
         "type": "AWS_IAM"
        }
       },
       "post": {
        "x-amazon-apigateway-integration": {
         "httpMethod": "POST",
         "uri": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":apigateway:",
            {
             "Ref": "AWS::Region"
            },
            ":lambda:path/2015-03-31/functions/",
            {
             "Fn::GetAtt": [
              "OpenApiGatewayToLambdaMessagesHandlerApiFunction0E78C5307",
              "Arn"
             ]
            },
            "/invocations"
           ]
          ]
         },
         "passthroughBehavior": "when_no_match",
         "type": "aws_proxy"
        },
        "x-amazon-apigateway-auth": {
         "type": "AWS_IAM"
        }
       }
      },
      "/photos": {
       "get": {
        "x-amazon-apigateway-integration": {
         "httpMethod": "POST",
         "uri": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":apigateway:",
            {
             "Ref": "AWS::Region"
            },
            ":lambda:path/2015-03-31/functions/",
            {
             "Fn::GetAtt": [
              "OpenApiGatewayToLambdaPhotosHandlerApiFunction1C42C52E8",
              "Arn"
             ]
            },
            "/invocations"
           ]
          ]
         },
         "passthroughBehavior": "when_no_match",
         "type": "aws_proxy"
        },
        "x-amazon-apigateway-auth": {
         "type": "AWS_IAM"
        }
       },
       "post": {
        "x-amazon-apigateway-integration": {
         "httpMethod": "POST",
         "uri": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":apigateway:",
            {
             "Ref": "AWS::Region"
            },
            ":lambda:path/2015-03-31/functions/",
            {
             "Fn::GetAtt": [
              "OpenApiGatewayToLambdaPhotosHandlerApiFunction1C42C52E8",
              "Arn"
             ]
            },
            "/invocations"
           ]
          ]
         },
         "passthroughBehavior": "when_no_match",
         "type": "aws_proxy"
        },
        "x-amazon-apigateway-auth": {
         "type": "AWS_IAM"
        }
       }
      }
     }
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "OpenApiGatewayToLambda-",
       {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Ref": "AWS::StackId"
           }
          ]
         }
        ]
       }
      ]
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaSpecRestApiDeploymentC8BD07754bd94750334d61fd5d4bd8fcdf375863": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W45",
       "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource"
      }
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaSpecRestApiDeploymentStageprodB962CBBB": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "OpenApiGatewayToLambdaApiAccessLogGroupE21284EC",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
    },
    "DeploymentId": {
     "Ref": "OpenApiGatewayToLambdaSpecRestApiDeploymentC8BD07754bd94750334d61fd5d4bd8fcdf375863"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "INFO",
      "ResourcePath": "/*"
     }
    ],
    "RestApiId": {
     "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
    },
    "StageName": "prod",
    "TracingEnabled": true
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaSpecRestApiUsagePlan44F6F5C6": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
      },
      "Stage": {
       "Ref": "OpenApiGatewayToLambdaSpecRestApiDeploymentStageprodB962CBBB"
      },
      "Throttle": {}
     }
    ]
   }
  },
  "OpenApiGatewayToLambdaLambdaRestApiCloudWatchRoleBC7E6D95": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
     }
    ]
   },
   "Metadata": {
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "OpenApiGatewayToLambdaLambdaRestApiAccount71EC7DA6": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "OpenApiGatewayToLambdaLambdaRestApiCloudWatchRoleBC7E6D95",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "OpenApiGatewayToLambdaSpecRestApi27C18064"
   ]
  }
 },
 "Outputs": {
  "OpenApiGatewayToLambdaSpecRestApiEndpointD1FA5E3A": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "OpenApiGatewayToLambdaSpecRestApi27C18064"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "OpenApiGatewayToLambdaSpecRestApiDeploymentStageprodB962CBBB"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}