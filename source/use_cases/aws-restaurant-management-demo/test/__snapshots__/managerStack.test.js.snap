// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test-manager-stack 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Outputs": Object {
    "managerapiLambdaRestApiEndpointD1A41897": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "managerapiLambdaRestApi62BEEAC7",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "managerapiLambdaRestApiDeploymentStageprod59C4A8D4",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13ArtifactHashD2A2C2EB": Object {
      "Description": "Artifact hash for asset \\"3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13\\"",
      "Type": "String",
    },
    "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13S3Bucket6D0E979D": Object {
      "Description": "S3 bucket for asset \\"3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13\\"",
      "Type": "String",
    },
    "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13S3VersionKeyF08F3926": Object {
      "Description": "S3 key for asset version \\"3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13\\"",
      "Type": "String",
    },
    "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aArtifactHash06F9F843": Object {
      "Description": "Artifact hash for asset \\"417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729a\\"",
      "Type": "String",
    },
    "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aS3BucketEFF1BA01": Object {
      "Description": "S3 bucket for asset \\"417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729a\\"",
      "Type": "String",
    },
    "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aS3VersionKey9BBF88A7": Object {
      "Description": "S3 key for asset version \\"417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729a\\"",
      "Type": "String",
    },
    "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194ArtifactHash049C6120": Object {
      "Description": "Artifact hash for asset \\"4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194\\"",
      "Type": "String",
    },
    "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194S3Bucket6E9AF9DD": Object {
      "Description": "S3 bucket for asset \\"4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194\\"",
      "Type": "String",
    },
    "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194S3VersionKey00C1823E": Object {
      "Description": "S3 key for asset version \\"4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194\\"",
      "Type": "String",
    },
    "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0ArtifactHashF35F1FB9": Object {
      "Description": "Artifact hash for asset \\"83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0\\"",
      "Type": "String",
    },
    "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0S3Bucket0FECA056": Object {
      "Description": "S3 bucket for asset \\"83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0\\"",
      "Type": "String",
    },
    "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0S3VersionKeyA5DB7D1B": Object {
      "Description": "S3 key for asset version \\"83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0\\"",
      "Type": "String",
    },
    "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2ArtifactHashF4AAF0F9": Object {
      "Description": "Artifact hash for asset \\"99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2\\"",
      "Type": "String",
    },
    "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2S3Bucket75F8025A": Object {
      "Description": "S3 bucket for asset \\"99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2\\"",
      "Type": "String",
    },
    "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2S3VersionKey0BAC175C": Object {
      "Description": "S3 key for asset version \\"99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2\\"",
      "Type": "String",
    },
    "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393ArtifactHashEA0663AC": Object {
      "Description": "Artifact hash for asset \\"bee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393\\"",
      "Type": "String",
    },
    "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393S3Bucket514B0A32": Object {
      "Description": "S3 bucket for asset \\"bee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393\\"",
      "Type": "String",
    },
    "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393S3VersionKey0D96EFA5": Object {
      "Description": "S3 key for asset version \\"bee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393\\"",
      "Type": "String",
    },
    "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baArtifactHashE5FF10CC": Object {
      "Description": "Artifact hash for asset \\"e247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967ba\\"",
      "Type": "String",
    },
    "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baS3Bucket0B99817B": Object {
      "Description": "S3 bucket for asset \\"e247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967ba\\"",
      "Type": "String",
    },
    "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baS3VersionKey6F469E09": Object {
      "Description": "S3 key for asset version \\"e247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967ba\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "archiveordersLambdaFunction66659E04": Object {
      "DependsOn": Array [
        "archiveordersLambdaFunctionServiceRoleDefaultPolicyDB67FB52",
        "archiveordersLambdaFunctionServiceRoleE513ACF7",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2S3Bucket75F8025A",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2S3VersionKey0BAC175C",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters99da7fc0497f7d8697128700d73d1010c153a6af5446b3f86452c62b633be3e2S3VersionKey0BAC175C",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DDB_TABLE_NAME": Object {
              "Fn::ImportValue": "SharedStack:ExportsOutputRefordertable80C5609084F626AD",
            },
            "S3_BUCKET_NAME": Object {
              "Fn::ImportValue": "ExistingResourcesStack:ExportsOutputRefexistingorderarchivebucket95AB7C994BD2255B",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::ImportValue": "SharedStack:ExportsOutputRefshareddbfunctionslayerA9CFEC5A89EBE406",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "archiveordersLambdaFunctionServiceRoleE513ACF7",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "archiveordersLambdaFunctionServiceRoleDefaultPolicyDB67FB52": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "ExistingResourcesStack:ExportsOutputFnGetAttexistingorderarchivebucket95AB7C99Arn7A4BF717",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "ExistingResourcesStack:ExportsOutputFnGetAttexistingorderarchivebucket95AB7C99Arn7A4BF717",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "archiveordersLambdaFunctionServiceRoleDefaultPolicyDB67FB52",
        "Roles": Array [
          Object {
            "Ref": "archiveordersLambdaFunctionServiceRoleE513ACF7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "archiveordersLambdaFunctionServiceRoleE513ACF7": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "calculatetipsLambdaFunction9F2FE033": Object {
      "DependsOn": Array [
        "calculatetipsLambdaFunctionServiceRoleDefaultPolicyED27C928",
        "calculatetipsLambdaFunctionServiceRoleDE97A87F",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aS3BucketEFF1BA01",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aS3VersionKey9BBF88A7",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters417a2e0a2352189e861a2cadf25a3b8a7ccbc22a6d8e3d4466f611d46fdd729aS3VersionKey9BBF88A7",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DDB_TABLE_NAME": Object {
              "Fn::ImportValue": "SharedStack:ExportsOutputRefordertable80C5609084F626AD",
            },
            "SNS_TOPIC_ARN": Object {
              "Ref": "calculatetipstopicSnsTopicD7FACC9C",
            },
            "SNS_TOPIC_NAME": Object {
              "Fn::GetAtt": Array [
                "calculatetipstopicSnsTopicD7FACC9C",
                "TopicName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::ImportValue": "SharedStack:ExportsOutputRefshareddbfunctionslayerA9CFEC5A89EBE406",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "calculatetipsLambdaFunctionServiceRoleDE97A87F",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "calculatetipsLambdaFunctionServiceRoleDE97A87F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "calculatetipsLambdaFunctionServiceRoleDefaultPolicyED27C928": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "calculatetipstopicSnsTopicD7FACC9C",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "calculatetipsLambdaFunctionServiceRoleDefaultPolicyED27C928",
        "Roles": Array [
          Object {
            "Ref": "calculatetipsLambdaFunctionServiceRoleDE97A87F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "calculatetipstopicSnsTopicD7FACC9C": Object {
      "Properties": Object {
        "KmsMasterKeyId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":kms:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":alias/aws/sns",
            ],
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "calculatetipstopicSnsTopicPolicy529CD9C3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:SetTopicAttributes",
                "SNS:DeleteTopic",
                "SNS:ListSubscriptionsByTopic",
                "SNS:GetTopicAttributes",
                "SNS:Receive",
                "SNS:AddPermission",
                "SNS:Subscribe",
              ],
              "Condition": Object {
                "StringEquals": Object {
                  "AWS:SourceOwner": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Ref": "calculatetipstopicSnsTopicD7FACC9C",
              },
              "Sid": "TopicOwnerOnlyAccess",
            },
            Object {
              "Action": Array [
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:SetTopicAttributes",
                "SNS:DeleteTopic",
                "SNS:ListSubscriptionsByTopic",
                "SNS:GetTopicAttributes",
                "SNS:Receive",
                "SNS:AddPermission",
                "SNS:Subscribe",
              ],
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Ref": "calculatetipstopicSnsTopicD7FACC9C",
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Topics": Array [
          Object {
            "Ref": "calculatetipstopicSnsTopicD7FACC9C",
          },
        ],
      },
      "Type": "AWS::SNS::TopicPolicy",
    },
    "checklateordersLambdaFunctionAwsEventsLambdaInvokePermission124C4D337": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "checklateordersLambdaFunctionB46EDA7D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "checklateordersschedulerchecklateordersschedulerWEventsRule15B31DCC",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "checklateordersLambdaFunctionB46EDA7D": Object {
      "DependsOn": Array [
        "checklateordersLambdaFunctionServiceRoleDefaultPolicy4DABEECE",
        "checklateordersLambdaFunctionServiceRoleA8F250A0",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baS3Bucket0B99817B",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baS3VersionKey6F469E09",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterse247a6949734ab1a72f6679bdeb6de1bd7e6c8714508986e7cfe184ad2b967baS3VersionKey6F469E09",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DDB_TABLE_NAME": Object {
              "Fn::ImportValue": "SharedStack:ExportsOutputRefordertable80C5609084F626AD",
            },
            "LATE_ORDER_THRESHOLD": "30",
            "SNS_TOPIC_ARN": Object {
              "Ref": "checklateordersnotifierSnsTopic2055CAD8",
            },
            "SNS_TOPIC_NAME": Object {
              "Fn::GetAtt": Array [
                "checklateordersnotifierSnsTopic2055CAD8",
                "TopicName",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "checklateordersLambdaFunctionServiceRoleA8F250A0",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "checklateordersLambdaFunctionServiceRoleA8F250A0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "checklateordersLambdaFunctionServiceRoleDefaultPolicy4DABEECE": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "checklateordersnotifierSnsTopic2055CAD8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "checklateordersLambdaFunctionServiceRoleDefaultPolicy4DABEECE",
        "Roles": Array [
          Object {
            "Ref": "checklateordersLambdaFunctionServiceRoleA8F250A0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "checklateordersnotifierSnsTopic2055CAD8": Object {
      "Properties": Object {
        "KmsMasterKeyId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":kms:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":alias/aws/sns",
            ],
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "checklateordersnotifierSnsTopicPolicyCF0A65E0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:SetTopicAttributes",
                "SNS:DeleteTopic",
                "SNS:ListSubscriptionsByTopic",
                "SNS:GetTopicAttributes",
                "SNS:Receive",
                "SNS:AddPermission",
                "SNS:Subscribe",
              ],
              "Condition": Object {
                "StringEquals": Object {
                  "AWS:SourceOwner": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Ref": "checklateordersnotifierSnsTopic2055CAD8",
              },
              "Sid": "TopicOwnerOnlyAccess",
            },
            Object {
              "Action": Array [
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:SetTopicAttributes",
                "SNS:DeleteTopic",
                "SNS:ListSubscriptionsByTopic",
                "SNS:GetTopicAttributes",
                "SNS:Receive",
                "SNS:AddPermission",
                "SNS:Subscribe",
              ],
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Ref": "checklateordersnotifierSnsTopic2055CAD8",
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Topics": Array [
          Object {
            "Ref": "checklateordersnotifierSnsTopic2055CAD8",
          },
        ],
      },
      "Type": "AWS::SNS::TopicPolicy",
    },
    "checklateordersschedulerchecklateordersschedulerWEventsRule15B31DCC": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "checklateordersLambdaFunctionB46EDA7D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "closeoutserviceExecutionAbortedAlarm861B143E": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that aborted exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "closeoutserviceStateMachineC9DD68A8",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsAborted",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "closeoutserviceExecutionFailedAlarm7495D8BE": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that failed exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "closeoutserviceStateMachineC9DD68A8",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsFailed",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "closeoutserviceExecutionThrottledAlarmC5A6E612": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that throttled exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "closeoutserviceStateMachineC9DD68A8",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionThrottled",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "closeoutserviceLambdaFunction684B26D3": Object {
      "DependsOn": Array [
        "closeoutserviceLambdaFunctionServiceRoleDefaultPolicy95A79CC3",
        "closeoutserviceLambdaFunctionServiceRoleB49E9696",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393S3Bucket514B0A32",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393S3VersionKey0D96EFA5",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersbee7a88e44057a981dee36ffd34a5dfeebd59c93fc6b10b697156d547aca9393S3VersionKey0D96EFA5",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "STATE_MACHINE_ARN": Object {
              "Ref": "closeoutserviceStateMachineC9DD68A8",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "closeoutserviceLambdaFunctionServiceRoleB49E9696",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "closeoutserviceLambdaFunctionServiceRoleB49E9696": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "closeoutserviceLambdaFunctionServiceRoleDefaultPolicy95A79CC3": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "closeoutserviceStateMachineC9DD68A8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "closeoutserviceLambdaFunctionServiceRoleDefaultPolicy95A79CC3",
        "Roles": Array [
          Object {
            "Ref": "closeoutserviceLambdaFunctionServiceRoleB49E9696",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "closeoutserviceStateMachineC9DD68A8": Object {
      "DependsOn": Array [
        "closeoutserviceStateMachineRoleDefaultPolicy5F05BEB8",
        "closeoutserviceStateMachineRoleCA7F9A09",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"create-reports-task\\",\\"States\\":{\\"create-reports-task\\":{\\"Next\\":\\"calculate-tips-task\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "createreportLambdaFunctionB37EBE52",
                  "Arn",
                ],
              },
              "\\"},\\"calculate-tips-task\\":{\\"Next\\":\\"archive-orders-task\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "calculatetipsLambdaFunction9F2FE033",
                  "Arn",
                ],
              },
              "\\"},\\"archive-orders-task\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "archiveordersLambdaFunction66659E04",
                  "Arn",
                ],
              },
              "\\"}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "closeoutserviceStateMachineLogGroup56CA2C8F",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ERROR",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "closeoutserviceStateMachineRoleCA7F9A09",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "closeoutserviceStateMachineLogGroup56CA2C8F": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": "/aws/vendedlogs/states/managerstackcloseoutservicestatemachinelog5da3d5b2d585",
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "closeoutserviceStateMachineRoleCA7F9A09": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "closeoutserviceStateMachineRoleDefaultPolicy5F05BEB8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The 'LogDelivery' actions do not support resource-level authorizations",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "createreportLambdaFunctionB37EBE52",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "createreportLambdaFunctionB37EBE52",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "calculatetipsLambdaFunction9F2FE033",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "calculatetipsLambdaFunction9F2FE033",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "archiveordersLambdaFunction66659E04",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "archiveordersLambdaFunction66659E04",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "closeoutserviceStateMachineRoleDefaultPolicy5F05BEB8",
        "Roles": Array [
          Object {
            "Ref": "closeoutserviceStateMachineRoleCA7F9A09",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "createreportLambdaFunctionB37EBE52": Object {
      "DependsOn": Array [
        "createreportLambdaFunctionServiceRoleDefaultPolicy5A317B6C",
        "createreportLambdaFunctionServiceRole33C78256",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194S3Bucket6E9AF9DD",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194S3VersionKey00C1823E",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters4f63f3314eba5199f6a3a67bcc61daa0b5818e6d1fd850453035e9897c9ea194S3VersionKey00C1823E",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DDB_TABLE_NAME": Object {
              "Fn::ImportValue": "SharedStack:ExportsOutputRefordertable80C5609084F626AD",
            },
            "S3_BUCKET_NAME": Object {
              "Ref": "reportsbucketS3BucketCC334898",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::ImportValue": "SharedStack:ExportsOutputRefshareddbfunctionslayerA9CFEC5A89EBE406",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "createreportLambdaFunctionServiceRole33C78256",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "createreportLambdaFunctionServiceRole33C78256": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "createreportLambdaFunctionServiceRoleDefaultPolicy5A317B6C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "reportsbucketS3BucketCC334898",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "reportsbucketS3BucketCC334898",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "createreportLambdaFunctionServiceRoleDefaultPolicy5A317B6C",
        "Roles": Array [
          Object {
            "Ref": "createreportLambdaFunctionServiceRole33C78256",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "getallordersLambdaFunctionFEF65B05": Object {
      "DependsOn": Array [
        "getallordersLambdaFunctionServiceRoleDefaultPolicy705A0D9A",
        "getallordersLambdaFunctionServiceRole8AF6EF71",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13S3Bucket6D0E979D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13S3VersionKeyF08F3926",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters3a83da329865c0ce17a9871113042571872da858fb0911bab4526333986b2e13S3VersionKeyF08F3926",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DDB_TABLE_NAME": Object {
              "Fn::ImportValue": "SharedStack:ExportsOutputRefordertable80C5609084F626AD",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::ImportValue": "SharedStack:ExportsOutputRefshareddbfunctionslayerA9CFEC5A89EBE406",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "getallordersLambdaFunctionServiceRole8AF6EF71",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "getallordersLambdaFunctionServiceRole8AF6EF71": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getallordersLambdaFunctionServiceRoleDefaultPolicy705A0D9A": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "SharedStack:ExportsOutputFnGetAttordertable80C56090ArnFF5A50B5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "getallordersLambdaFunctionServiceRoleDefaultPolicy705A0D9A",
        "Roles": Array [
          Object {
            "Ref": "getallordersLambdaFunctionServiceRole8AF6EF71",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "getreportLambdaFunction2A26EACE": Object {
      "DependsOn": Array [
        "getreportLambdaFunctionServiceRoleDefaultPolicy0A75937B",
        "getreportLambdaFunctionServiceRole39064368",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0S3Bucket0FECA056",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0S3VersionKeyA5DB7D1B",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters83ada50af307c970f7adc20c9db53c485f8a494eb3f1f5c79964c30a6fc739c0S3VersionKeyA5DB7D1B",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "reportsbucketS3BucketCC334898",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getreportLambdaFunctionServiceRole39064368",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 15,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "getreportLambdaFunctionServiceRole39064368": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getreportLambdaFunctionServiceRoleDefaultPolicy0A75937B": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "reportsbucketS3BucketCC334898",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "reportsbucketS3BucketCC334898",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "getreportLambdaFunctionServiceRoleDefaultPolicy0A75937B",
        "Roles": Array [
          Object {
            "Ref": "getreportLambdaFunctionServiceRole39064368",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "managerapiApiAccessLogGroup35F9537B": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "managerapiCognitoAuthorizer5745AF8D": Object {
      "Properties": Object {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "authorizer",
        "ProviderARNs": Array [
          Object {
            "Fn::GetAtt": Array [
              "managerapiCognitoUserPool03946196",
              "Arn",
            ],
          },
        ],
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
        "Type": "COGNITO_USER_POOLS",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "managerapiCognitoUserPool03946196": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": Object {
          "AdvancedSecurityMode": "ENFORCED",
        },
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "managerapiCognitoUserPoolClientB3BC933D": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": Array [
          "https://example.com",
        ],
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "managerapiCognitoUserPool03946196",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "managerapiLambdaRestApi62BEEAC7": Object {
      "Properties": Object {
        "Description": "Demo: Manager API",
        "EndpointConfiguration": Object {
          "Types": Array [
            "EDGE",
          ],
        },
        "Name": "LambdaRestApi",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "managerapiLambdaRestApiAccount350A78F5": Object {
      "DependsOn": Array [
        "managerapiLambdaRestApi62BEEAC7",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "managerapiLambdaRestApiCloudWatchRole43F48235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "managerapiLambdaRestApiCloudWatchRole43F48235": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaRestApiCloudWatchRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "managerapiLambdaRestApiDeployment719D102Abf8fc62f0a59aea37747b68fec60f4a4": Object {
      "DependsOn": Array [
        "managerapiLambdaRestApicloseoutserviceproxyANY182BEB46",
        "managerapiLambdaRestApicloseoutserviceproxyECAF0FA1",
        "managerapiLambdaRestApicloseoutservice2D3987E6",
        "managerapiLambdaRestApigetallordersproxyANYEAB740ED",
        "managerapiLambdaRestApigetallordersproxyEE336136",
        "managerapiLambdaRestApigetallorders29C83FB0",
        "managerapiLambdaRestApigetreportproxyANY93C7142D",
        "managerapiLambdaRestApigetreportproxy2FB66C91",
        "managerapiLambdaRestApigetreportDB310438",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W45",
              "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checkes for it in AWS::ApiGateway::Deployment resource",
            },
          ],
        },
      },
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "managerapiLambdaRestApiDeploymentStageprod59C4A8D4": Object {
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "managerapiApiAccessLogGroup35F9537B",
              "Arn",
            ],
          },
          "Format": "{\\"requestId\\":\\"$context.requestId\\",\\"ip\\":\\"$context.identity.sourceIp\\",\\"user\\":\\"$context.identity.user\\",\\"caller\\":\\"$context.identity.caller\\",\\"requestTime\\":\\"$context.requestTime\\",\\"httpMethod\\":\\"$context.httpMethod\\",\\"resourcePath\\":\\"$context.resourcePath\\",\\"status\\":\\"$context.status\\",\\"protocol\\":\\"$context.protocol\\",\\"responseLength\\":\\"$context.responseLength\\"}",
        },
        "DeploymentId": Object {
          "Ref": "managerapiLambdaRestApiDeployment719D102Abf8fc62f0a59aea37747b68fec60f4a4",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
        "StageName": "prod",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "managerapiLambdaRestApiUsagePlanF10CE619": Object {
      "Properties": Object {
        "ApiStages": Array [
          Object {
            "ApiId": Object {
              "Ref": "managerapiLambdaRestApi62BEEAC7",
            },
            "Stage": Object {
              "Ref": "managerapiLambdaRestApiDeploymentStageprod59C4A8D4",
            },
            "Throttle": Object {},
          },
        ],
      },
      "Type": "AWS::ApiGateway::UsagePlan",
    },
    "managerapiLambdaRestApicloseoutservice2D3987E6": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "managerapiLambdaRestApi62BEEAC7",
            "RootResourceId",
          ],
        },
        "PathPart": "close-out-service",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApicloseoutserviceproxyANY182BEB46": Object {
      "Properties": Object {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": Object {
          "Ref": "managerapiCognitoAuthorizer5745AF8D",
        },
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "closeoutserviceLambdaFunction684B26D3",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "managerapiLambdaRestApicloseoutserviceproxyECAF0FA1",
        },
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "managerapiLambdaRestApicloseoutserviceproxyANYApiPermissionManagerStackmanagerapiLambdaRestApi386CA826ANYcloseoutserviceproxy132F7E1D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "closeoutserviceLambdaFunction684B26D3",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/",
              Object {
                "Ref": "managerapiLambdaRestApiDeploymentStageprod59C4A8D4",
              },
              "/*/close-out-service/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "managerapiLambdaRestApicloseoutserviceproxyANYApiPermissionTestManagerStackmanagerapiLambdaRestApi386CA826ANYcloseoutserviceproxy8A25C882": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "closeoutserviceLambdaFunction684B26D3",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/test-invoke-stage/*/close-out-service/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "managerapiLambdaRestApicloseoutserviceproxyECAF0FA1": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "managerapiLambdaRestApicloseoutservice2D3987E6",
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApigetallorders29C83FB0": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "managerapiLambdaRestApi62BEEAC7",
            "RootResourceId",
          ],
        },
        "PathPart": "get-all-orders",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApigetallordersproxyANYApiPermissionManagerStackmanagerapiLambdaRestApi386CA826ANYgetallordersproxy57374F7E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getallordersLambdaFunctionFEF65B05",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/",
              Object {
                "Ref": "managerapiLambdaRestApiDeploymentStageprod59C4A8D4",
              },
              "/*/get-all-orders/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "managerapiLambdaRestApigetallordersproxyANYApiPermissionTestManagerStackmanagerapiLambdaRestApi386CA826ANYgetallordersproxy45104276": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getallordersLambdaFunctionFEF65B05",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/test-invoke-stage/*/get-all-orders/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "managerapiLambdaRestApigetallordersproxyANYEAB740ED": Object {
      "Properties": Object {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": Object {
          "Ref": "managerapiCognitoAuthorizer5745AF8D",
        },
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "getallordersLambdaFunctionFEF65B05",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "managerapiLambdaRestApigetallordersproxyEE336136",
        },
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "managerapiLambdaRestApigetallordersproxyEE336136": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "managerapiLambdaRestApigetallorders29C83FB0",
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApigetreportDB310438": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "managerapiLambdaRestApi62BEEAC7",
            "RootResourceId",
          ],
        },
        "PathPart": "get-report",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApigetreportproxy2FB66C91": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "managerapiLambdaRestApigetreportDB310438",
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "managerapiLambdaRestApigetreportproxyANY93C7142D": Object {
      "Properties": Object {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": Object {
          "Ref": "managerapiCognitoAuthorizer5745AF8D",
        },
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "getreportLambdaFunction2A26EACE",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "managerapiLambdaRestApigetreportproxy2FB66C91",
        },
        "RestApiId": Object {
          "Ref": "managerapiLambdaRestApi62BEEAC7",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "managerapiLambdaRestApigetreportproxyANYApiPermissionManagerStackmanagerapiLambdaRestApi386CA826ANYgetreportproxy80B2B901": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getreportLambdaFunction2A26EACE",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/",
              Object {
                "Ref": "managerapiLambdaRestApiDeploymentStageprod59C4A8D4",
              },
              "/*/get-report/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "managerapiLambdaRestApigetreportproxyANYApiPermissionTestManagerStackmanagerapiLambdaRestApi386CA826ANYgetreportproxy7868B7DA": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getreportLambdaFunction2A26EACE",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "managerapiLambdaRestApi62BEEAC7",
              },
              "/test-invoke-stage/*/get-report/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "reportsbucketS3BucketCC334898": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "reportsbucketS3LoggingBucket088F7E0E",
          },
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "reportsbucketS3BucketPolicyCF9C1527": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "reportsbucketS3BucketCC334898",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "reportsbucketS3BucketCC334898",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "reportsbucketS3BucketCC334898",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "reportsbucketS3LoggingBucket088F7E0E": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "reportsbucketS3LoggingBucketPolicy82A7D267": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "reportsbucketS3LoggingBucket088F7E0E",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "reportsbucketS3LoggingBucket088F7E0E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "reportsbucketS3LoggingBucket088F7E0E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
}
`;
